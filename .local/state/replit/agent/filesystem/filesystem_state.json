{"file_contents":{"middleware.ts":{"content":"import { updateSession } from \"@/lib/supabase/middleware\"\nimport type { NextRequest } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n}\n","size_bytes":628},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false","size_bytes":92},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.98 0 0);\n  --card: oklch(0.12 0 0);\n  --card-foreground: oklch(0.98 0 0);\n  --popover: oklch(0.12 0 0);\n  --popover-foreground: oklch(0.98 0 0);\n  --primary: oklch(0.7 0.15 142);\n  --primary-foreground: oklch(0.08 0 0);\n  --secondary: oklch(0.18 0 0);\n  --secondary-foreground: oklch(0.98 0 0);\n  --muted: oklch(0.15 0 0);\n  --muted-foreground: oklch(0.6 0 0);\n  --accent: oklch(0.18 0 0);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.6 0.2 25);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.2 0 0);\n  --input: oklch(0.15 0 0);\n  --ring: oklch(0.7 0.15 142);\n  --chart-1: oklch(0.7 0.15 142);\n  --chart-2: oklch(0.65 0.2 200);\n  --chart-3: oklch(0.6 0.25 280);\n  --chart-4: oklch(0.75 0.18 60);\n  --chart-5: oklch(0.68 0.22 320);\n  --radius: 0.75rem;\n  --sidebar: oklch(0.1 0 0);\n  --sidebar-foreground: oklch(0.98 0 0);\n  --sidebar-primary: oklch(0.7 0.15 142);\n  --sidebar-primary-foreground: oklch(0.08 0 0);\n  --sidebar-accent: oklch(0.15 0 0);\n  --sidebar-accent-foreground: oklch(0.98 0 0);\n  --sidebar-border: oklch(0.2 0 0);\n  --sidebar-ring: oklch(0.7 0.15 142);\n}\n\n.dark {\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.98 0 0);\n  --card: oklch(0.12 0 0);\n  --card-foreground: oklch(0.98 0 0);\n  --popover: oklch(0.12 0 0);\n  --popover-foreground: oklch(0.98 0 0);\n  --primary: oklch(0.7 0.15 142);\n  --primary-foreground: oklch(0.08 0 0);\n  --secondary: oklch(0.18 0 0);\n  --secondary-foreground: oklch(0.98 0 0);\n  --muted: oklch(0.15 0 0);\n  --muted-foreground: oklch(0.6 0 0);\n  --accent: oklch(0.18 0 0);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.6 0.2 25);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.2 0 0);\n  --input: oklch(0.15 0 0);\n  --ring: oklch(0.7 0.15 142);\n  --chart-1: oklch(0.7 0.15 142);\n  --chart-2: oklch(0.65 0.2 200);\n  --chart-3: oklch(0.6 0.25 280);\n  --chart-4: oklch(0.75 0.18 60);\n  --chart-5: oklch(0.68 0.22 320);\n  --sidebar: oklch(0.1 0 0);\n  --sidebar-foreground: oklch(0.98 0 0);\n  --sidebar-primary: oklch(0.7 0.15 142);\n  --sidebar-primary-foreground: oklch(0.08 0 0);\n  --sidebar-accent: oklch(0.15 0 0);\n  --sidebar-accent-foreground: oklch(0.98 0 0);\n  --sidebar-border: oklch(0.2 0 0);\n  --sidebar-ring: oklch(0.7 0.15 142);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Grid pattern background */\n  .grid-pattern {\n    background-image: linear-gradient(rgba(255, 255, 255, 0.02) 1px, transparent 1px),\n      linear-gradient(90deg, rgba(255, 255, 255, 0.02) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n}\n","size_bytes":4478},"app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport { GeistSans } from 'geist/font/sans'\nimport { GeistMono } from 'geist/font/mono'\nimport { Analytics } from '@vercel/analytics/next'\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'v0 App',\n  description: 'Created with v0',\n  generator: 'v0.app',\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable}`}>\n        {children}\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":598},"app/page.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { getUser } from \"@/lib/auth\"\n\nexport default async function HomePage() {\n  const user = await getUser()\n\n  if (user) {\n    if (user.role === \"admin\") {\n      redirect(\"/admin\")\n    } else {\n      // Handle both waiter and waitstaff roles\n      redirect(\"/waiter\")\n    }\n  }\n\n  redirect(\"/auth/login\")\n}\n","size_bytes":354},"components/auth-guard.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useRouter } from \"next/navigation\"\nimport { useEffect, useState } from \"react\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface AuthGuardProps {\n  children: React.ReactNode\n  requiredRole?: \"admin\" | \"waitstaff\"\n}\n\nexport function AuthGuard({ children, requiredRole }: AuthGuardProps) {\n  const [isLoading, setIsLoading] = useState(true)\n  const [isAuthorized, setIsAuthorized] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Use our custom authentication API\n        const response = await fetch(\"/api/auth/me\", {\n          method: \"GET\",\n          credentials: \"include\"\n        })\n\n        if (!response.ok) {\n          router.push(\"/auth/login\")\n          return\n        }\n\n        const { user } = await response.json()\n\n        if (!user) {\n          router.push(\"/auth/login\")\n          return\n        }\n\n        if (requiredRole) {\n          if (user.status !== 'active') {\n            router.push(\"/auth/login\")\n            return\n          }\n\n          // Convert waiter to waitstaff for consistency\n          const userRole = user.role === 'waiter' ? 'waitstaff' : user.role\n\n          if (userRole !== requiredRole) {\n            // Redirect to appropriate dashboard based on actual role\n            if (userRole === \"admin\") {\n              router.push(\"/admin\")\n            } else {\n              router.push(\"/waiter\")\n            }\n            return\n          }\n        }\n\n        setIsAuthorized(true)\n      } catch (error) {\n        console.error(\"Auth check failed:\", error)\n        router.push(\"/auth/login\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    checkAuth()\n  }, [router, requiredRole])\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-orange-500\" />\n      </div>\n    )\n  }\n\n  if (!isAuthorized) {\n    return null\n  }\n\n  return <>{children}</>\n}\n","size_bytes":2038},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"hooks/use-mobile.ts":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/auth-utils.ts":{"content":"import { createClient } from \"@/lib/supabase/server\"\n\nexport async function getCurrentUser() {\n  const supabase = await createClient()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user) {\n    return null\n  }\n\n  const { data: userProfile } = await supabase.from(\"users\").select(\"*\").eq(\"id\", user.id).single()\n\n  return {\n    ...user,\n    profile: userProfile,\n  }\n}\n\nexport async function signOut() {\n  const supabase = await createClient()\n  await supabase.auth.signOut()\n}\n","size_bytes":505},"lib/auth.ts":{"content":"import bcrypt from \"bcryptjs\"\nimport { cookies } from \"next/headers\"\nimport { randomBytes } from \"crypto\"\nimport { createClient } from \"./supabase/server\"\n\nexport interface User {\n  id: string\n  staff_id: string\n  email: string\n  firstName: string\n  lastName: string\n  fullName: string\n  status: string\n  role: string\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10)\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash)\n}\n\nexport async function createSession(userId: string): Promise<string> {\n  const sessionId = randomBytes(32).toString(\"hex\")\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n\n  // Store session in database for security\n  const supabase = createClient()\n  await supabase\n    .from('user_sessions')\n    .insert({\n      session_id: sessionId,\n      user_id: userId,\n      expires_at: expiresAt.toISOString(),\n      created_at: new Date().toISOString()\n    })\n\n  // Store only session ID in cookie\n  const cookieStore = await cookies()\n  cookieStore.set(\"session\", sessionId, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"strict\",\n    expires: expiresAt,\n  })\n\n  return sessionId\n}\n\nexport async function getUser(): Promise<User | null> {\n  const cookieStore = await cookies()\n  const sessionId = cookieStore.get(\"session\")?.value\n  \n  if (!sessionId) {\n    return null\n  }\n  \n  try {\n    // Verify session from database\n    const supabase = createClient()\n    const { data: session, error: sessionError } = await supabase\n      .from('user_sessions')\n      .select('*')\n      .eq('session_id', sessionId)\n      .single()\n\n    if (sessionError || !session) {\n      return null\n    }\n\n    // Check if session is expired\n    const expiresAt = new Date(session.expires_at)\n    if (expiresAt < new Date()) {\n      // Clean up expired session\n      await supabase\n        .from('user_sessions')\n        .delete()\n        .eq('session_id', sessionId)\n      return null\n    }\n    \n    // Get user from database using session user_id\n    const { data: staff, error: staffError } = await supabase\n      .from('staff')\n      .select('*')\n      .eq('staff_id', session.user_id)\n      .single()\n\n    if (staffError || !staff || staff.status !== 'active') {\n      return null\n    }\n\n    return {\n      id: staff.staff_id,\n      staff_id: staff.staff_id,\n      email: staff.email || '',\n      firstName: staff.first_name,\n      lastName: staff.last_name,\n      fullName: `${staff.first_name} ${staff.last_name}`,\n      status: staff.status,\n      role: staff.role || 'waitstaff'\n    }\n  } catch (error) {\n    console.error(\"Session validation error:\", error)\n    return null\n  }\n}\n\nexport async function signOut(): Promise<void> {\n  const cookieStore = await cookies()\n  const sessionId = cookieStore.get(\"session\")?.value\n  \n  if (sessionId) {\n    // Remove session from database\n    const supabase = createClient()\n    await supabase\n      .from('user_sessions')\n      .delete()\n      .eq('session_id', sessionId)\n  }\n  \n  // Delete session cookie\n  cookieStore.delete(\"session\")\n}\n\nexport async function signIn(firstName: string, password: string): Promise<User | null> {\n  const supabase = createClient()\n  \n  // Find all staff members with matching first name (case insensitive)\n  const { data: staffList, error: staffError } = await supabase\n    .from('staff')\n    .select('*')\n    .ilike('first_name', firstName)\n    .eq('status', 'active')\n    \n  if (staffError || !staffList || staffList.length === 0) {\n    return null\n  }\n  \n  // Try password verification against all matching staff members\n  for (const staff of staffList) {\n    let passwordValid = false\n    \n    // Handle missing password_hash (NULL) - treat as needing migration\n    if (!staff.password_hash) {\n      // No password set yet - check if password equals staff_id and set it\n      if (password === staff.staff_id) {\n        passwordValid = true\n        const hashedPassword = await hashPassword(password)\n        await supabase\n          .from('staff')\n          .update({ password_hash: hashedPassword })\n          .eq('staff_id', staff.staff_id)\n      }\n    } else if (staff.password_hash === staff.staff_id) {\n      // Still plaintext - verify directly and hash it\n      passwordValid = password === staff.staff_id\n      if (passwordValid) {\n        const hashedPassword = await hashPassword(password)\n        await supabase\n          .from('staff')\n          .update({ password_hash: hashedPassword })\n          .eq('staff_id', staff.staff_id)\n      }\n    } else {\n      // Already hashed - use bcrypt verification\n      passwordValid = await verifyPassword(password, staff.password_hash)\n    }\n    \n    // If password is valid for this staff member, return the user\n    if (passwordValid) {\n      const user = {\n        id: staff.staff_id,\n        staff_id: staff.staff_id,\n        email: staff.email || '',\n        firstName: staff.first_name,\n        lastName: staff.last_name,\n        fullName: `${staff.first_name} ${staff.last_name}`,\n        status: staff.status,\n        role: staff.role || 'waitstaff'\n      }\n      \n      // Create secure session\n      await createSession(user.id)\n      \n      return user\n    }\n  }\n  \n  // No valid password found for any staff member with this first name\n  return null\n}\n","size_bytes":5411},"lib/db.ts":{"content":"// Supabase database functions\nimport { createClient } from './supabase/server'\n\n// Simple query function for compatibility (deprecated - use Supabase client directly)\nexport async function query(text: string, params: any[] = []) {\n  console.warn('query() function is deprecated. Use Supabase client directly.')\n  // Return empty results for compatibility\n  return { rows: [] }\n}\n\n// Staff table helpers\nexport async function getAllStaff() {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('staff')\n    .select('*')\n    .order('created_at', { ascending: false })\n    \n  if (error) {\n    console.error('Error fetching staff:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\nexport async function getStaffById(staff_id: string) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('staff')\n    .select('*')\n    .eq('staff_id', staff_id)\n    .single()\n    \n  if (error) {\n    console.error('Error fetching staff member:', error)\n    return null\n  }\n  \n  return data\n}\n\nexport async function createStaff(staffData: any) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('staff')\n    .insert(staffData)\n    .select()\n    .single()\n    \n  if (error) {\n    console.error('Error creating staff:', error)\n    throw error\n  }\n  \n  return data\n}\n\nexport async function updateStaff(staff_id: string, staffData: any) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('staff')\n    .update(staffData)\n    .eq('staff_id', staff_id)\n    .select()\n    .single()\n    \n  if (error) {\n    console.error('Error updating staff:', error)\n    throw error\n  }\n  \n  return data\n}\n\n// Inventory table helpers\nexport async function getAllInventory() {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('inventory')\n    .select('*')\n    .order('name')\n    \n  if (error) {\n    console.error('Error fetching inventory:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\nexport async function getInventoryByCategory(category: string) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('inventory')\n    .select('*')\n    .eq('category', category)\n    .order('name')\n    \n  if (error) {\n    console.error('Error fetching inventory by category:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\nexport async function updateInventoryQuantity(item_id: string, quantity: number) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('inventory')\n    .update({ quantity })\n    .eq('item_id', item_id)\n    .select()\n    .single()\n    \n  if (error) {\n    console.error('Error updating inventory quantity:', error)\n    throw error\n  }\n  \n  return data\n}\n\n// Sales table helpers\nexport async function getAllSales() {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('sales')\n    .select('*')\n    .order('sale_date', { ascending: false })\n    \n  if (error) {\n    console.error('Error fetching sales:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\nexport async function createSale(saleData: any) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('sales')\n    .insert(saleData)\n    .select()\n    .single()\n    \n  if (error) {\n    console.error('Error creating sale:', error)\n    throw error\n  }\n  \n  return data\n}\n\nexport async function getSalesByStaff(staff_member: string) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from('sales')\n    .select('*')\n    .eq('staff_member', staff_member)\n    .order('sale_date', { ascending: false })\n    \n  if (error) {\n    console.error('Error fetching sales by staff:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\n// Generic helper functions\nexport async function getTable(tableName: string) {\n  const supabase = createClient()\n  const { data, error } = await supabase\n    .from(tableName)\n    .select('*')\n    \n  if (error) {\n    console.error('Error fetching table:', error)\n    throw error\n  }\n  \n  return data || []\n}\n\nexport { createClient as supabase }\nexport default createClient","size_bytes":4166},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4337},"app/admin/page.tsx":{"content":"import { AuthGuard } from \"@/components/auth-guard\"\nimport { AdminDashboard } from \"@/components/admin/admin-dashboard\"\n\nexport default function AdminPage() {\n  return (\n    <AuthGuard requiredRole=\"admin\">\n      <AdminDashboard />\n    </AuthGuard>\n  )\n}\n","size_bytes":255},"app/setup/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { ChefHat, CheckCircle } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\nexport default function SetupPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isComplete, setIsComplete] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const router = useRouter()\n\n  const createAdminUser = async () => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      console.log(\"[v0] Creating admin staff...\")\n\n      const response = await fetch(\"/api/auth/setup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: \"admin@restaurant.com\",\n          password: \"0919RW\",\n          first_name: \"Admin\",\n          last_name: \"User\",\n          staff_id: \"2009AU\"\n        }),\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || \"Failed to create admin staff\")\n      }\n\n      console.log(\"[v0] Admin staff created successfully:\", result)\n\n      setIsComplete(true)\n\n      setTimeout(() => {\n        router.push(\"/auth/login\")\n      }, 3000)\n    } catch (error: any) {\n      console.log(\"[v0] Setup error:\", error)\n      setError(error.message || \"Failed to create admin staff\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isComplete) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-blue-50 p-6\">\n        <Card className=\"w-full max-w-md shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-green-500 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-3xl font-bold text-gray-900\">Setup Complete!</CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Admin staff created! You can now log in with your Staff ID.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n      <Card className=\"w-full max-w-md shadow-xl border-0\">\n        <CardHeader className=\"text-center pb-8\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center\">\n            <ChefHat className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-gray-900\">Restaurant POS Setup</CardTitle>\n          <CardDescription className=\"text-gray-600\">Create the initial admin staff member to get started</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-md\">\n            <h3 className=\"font-medium text-blue-900 mb-2\">Admin Staff Details:</h3>\n            <div className=\"text-sm text-blue-800 space-y-1\">\n              <p>\n                <strong>Email:</strong> admin@restaurant.com\n              </p>\n              <p>\n                <strong>Staff ID:</strong> 2009ADMIN\n              </p>\n              <p>\n                <strong>Password:</strong> 0919RW\n              </p>\n              <p>\n                <strong>Name:</strong> Admin User\n              </p>\n            </div>\n          </div>\n\n          {error && <div className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">{error}</div>}\n\n          <Button\n            onClick={createAdminUser}\n            disabled={isLoading}\n            className=\"w-full h-12 bg-orange-500 hover:bg-orange-600 text-white font-medium\"\n          >\n            {isLoading ? \"Creating Admin Staff...\" : \"Create Admin Staff\"}\n          </Button>\n\n          <p className=\"text-xs text-gray-500 text-center\">This will create the admin staff member in the database.</p>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":4239},"app/waiter/page.tsx":{"content":"import { AuthGuard } from \"@/components/auth-guard\"\nimport { WaiterDashboard } from \"@/components/waiter/waiter-dashboard\"\n\nexport default function WaiterPage() {\n  return (\n    <AuthGuard requiredRole=\"waitstaff\">\n      <WaiterDashboard />\n    </AuthGuard>\n  )\n}\n","size_bytes":264},"components/admin/account-creation.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { UserPlus, Loader2, CheckCircle, AlertCircle } from \"lucide-react\"\n\ninterface CreateAccountForm {\n  email: string\n  username: string\n  password: string\n  firstName: string\n  lastName: string\n  role: \"admin\" | \"waiter\"\n}\n\nexport function AccountCreation() {\n  const [form, setForm] = useState<CreateAccountForm>({\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"waiter\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState<{ type: \"success\" | \"error\"; text: string } | null>(null)\n\n  const supabase = createClient()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setMessage(null)\n\n    try {\n      // Create user in Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: form.email,\n        password: form.password,\n        options: {\n          data: {\n            username: form.username,\n            first_name: form.firstName,\n            last_name: form.lastName,\n            role: form.role,\n          },\n        },\n      })\n\n      if (authError) throw authError\n\n      if (authData.user) {\n        // Create user record in our users table\n        const { error: dbError } = await supabase.from(\"users\").insert({\n          id: authData.user.id,\n          username: form.username,\n          email: form.email,\n          first_name: form.firstName,\n          last_name: form.lastName,\n          role: form.role,\n          is_active: true,\n        })\n\n        if (dbError) throw dbError\n\n        setMessage({\n          type: \"success\",\n          text: `Account created successfully for ${form.firstName} ${form.lastName}`,\n        })\n\n        // Reset form\n        setForm({\n          email: \"\",\n          username: \"\",\n          password: \"\",\n          firstName: \"\",\n          lastName: \"\",\n          role: \"waiter\",\n        })\n      }\n    } catch (error: any) {\n      setMessage({\n        type: \"error\",\n        text: error.message || \"Failed to create account\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof CreateAccountForm, value: string) => {\n    setForm((prev) => ({ ...prev, [field]: value }))\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <UserPlus className=\"w-6 h-6 text-primary\" />\n        <h2 className=\"text-2xl font-bold\">Create Staff Account</h2>\n      </div>\n\n      <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n        <CardHeader>\n          <CardTitle>New Staff Member</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  value={form.firstName}\n                  onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                  required\n                  className=\"bg-background/50\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  value={form.lastName}\n                  onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                  required\n                  className=\"bg-background/50\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={form.email}\n                onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                required\n                className=\"bg-background/50\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                value={form.username}\n                onChange={(e) => handleInputChange(\"username\", e.target.value)}\n                required\n                className=\"bg-background/50\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={form.password}\n                onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                required\n                minLength={6}\n                className=\"bg-background/50\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select value={form.role} onValueChange={(value: \"admin\" | \"waiter\") => handleInputChange(\"role\", value)}>\n                <SelectTrigger className=\"bg-background/50\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"waiter\">Waiter</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {message && (\n              <Alert\n                className={\n                  message.type === \"success\" ? \"border-green-500/50 bg-green-500/10\" : \"border-red-500/50 bg-red-500/10\"\n                }\n              >\n                {message.type === \"success\" ? (\n                  <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                ) : (\n                  <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                )}\n                <AlertDescription className={message.type === \"success\" ? \"text-green-400\" : \"text-red-400\"}>\n                  {message.text}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button type=\"submit\" disabled={loading} className=\"w-full\">\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Creating Account...\n                </>\n              ) : (\n                <>\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":7096},"components/admin/admin-dashboard.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport StaffManagement from \"./staff-management\"\nimport { MenuManagement } from \"./menu-management\"\nimport { OrdersOverview } from \"./orders-overview\"\nimport { SalesAnalytics } from \"./sales-analytics\"\nimport { AccountCreation } from \"./account-creation\"\nimport {\n  Users,\n  Utensils,\n  ClipboardList,\n  BarChart3,\n  LogOut,\n  DollarSign,\n  Clock,\n  TrendingUp,\n  ShoppingBag,\n} from \"lucide-react\"\n\ninterface DashboardStats {\n  totalOrders: number\n  totalRevenue: number\n  activeOrders: number\n  totalStaff: number\n  todayOrders: number\n  todayRevenue: number\n}\n\nexport function AdminDashboard() {\n  const [activeTab, setActiveTab] = useState(\"overview\")\n  const [stats, setStats] = useState<DashboardStats>({\n    totalOrders: 0,\n    totalRevenue: 0,\n    activeOrders: 0,\n    totalStaff: 0,\n    todayOrders: 0,\n    todayRevenue: 0,\n  })\n  const [user, setUser] = useState<any>(null)\n\n  const supabase = createClient()\n\n  useEffect(() => {\n    getCurrentUser()\n    fetchDashboardStats()\n  }, [])\n\n  const getCurrentUser = async () => {\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    if (user) {\n      const { data: profile } = await supabase.from(\"users\").select(\"*\").eq(\"id\", user.id).single()\n      setUser({ ...user, profile })\n    }\n  }\n\n  const fetchDashboardStats = async () => {\n    try {\n      // Get total orders and revenue\n      const { data: allOrders } = await supabase.from(\"orders\").select(\"total_amount, created_at, status\")\n\n      // Get active orders\n      const { data: activeOrders } = await supabase\n        .from(\"orders\")\n        .select(\"id\")\n        .in(\"status\", [\"pending\", \"confirmed\", \"preparing\", \"ready\"])\n\n      // Get total staff\n      const { data: staff } = await supabase.from(\"users\").select(\"id\").eq(\"is_active\", true)\n\n      // Calculate today's stats\n      const today = new Date().toISOString().split(\"T\")[0]\n      const todayOrders = allOrders?.filter((order) => order.created_at.startsWith(today)) || []\n\n      const totalRevenue = allOrders?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0\n      const todayRevenue = todayOrders.reduce((sum, order) => sum + (order.total_amount || 0), 0)\n\n      setStats({\n        totalOrders: allOrders?.length || 0,\n        totalRevenue,\n        activeOrders: activeOrders?.length || 0,\n        totalStaff: staff?.length || 0,\n        todayOrders: todayOrders.length,\n        todayRevenue,\n      })\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error)\n    }\n  }\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background grid-pattern\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Utensils className=\"w-8 h-8 text-primary\" />\n              <h1 className=\"text-2xl font-bold\">Restaurant POS</h1>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-primary/20 text-primary\">\n              Admin Dashboard\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <span>\n                Welcome, {user?.profile?.first_name} {user?.profile?.last_name}\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleSignOut}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6 bg-card/50 backdrop-blur-sm\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\">\n              <ClipboardList className=\"w-4 h-4\" />\n              Orders\n            </TabsTrigger>\n            <TabsTrigger value=\"menu\" className=\"flex items-center gap-2\">\n              <Utensils className=\"w-4 h-4\" />\n              Menu\n            </TabsTrigger>\n            <TabsTrigger value=\"staff\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Staff\n            </TabsTrigger>\n            <TabsTrigger value=\"accounts\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Create Account\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-4 h-4\" />\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Today's Orders</CardTitle>\n                  <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{stats.todayOrders}</div>\n                  <p className=\"text-xs text-muted-foreground\">Total: {stats.totalOrders} orders</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Today's Revenue</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">${stats.todayRevenue.toFixed(2)}</div>\n                  <p className=\"text-xs text-muted-foreground\">Total: ${stats.totalRevenue.toFixed(2)}</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Orders</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{stats.activeOrders}</div>\n                  <p className=\"text-xs text-muted-foreground\">Pending & In Progress</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Staff</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{stats.totalStaff}</div>\n                  <p className=\"text-xs text-muted-foreground\">Total employees</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button\n                    onClick={() => setActiveTab(\"orders\")}\n                    className=\"w-full justify-start bg-primary/10 hover:bg-primary/20 text-primary\"\n                  >\n                    <ClipboardList className=\"w-4 h-4 mr-2\" />\n                    View All Orders\n                  </Button>\n                  <Button onClick={() => setActiveTab(\"menu\")} variant=\"outline\" className=\"w-full justify-start\">\n                    <Utensils className=\"w-4 h-4 mr-2\" />\n                    Manage Menu Items\n                  </Button>\n                  <Button onClick={() => setActiveTab(\"staff\")} variant=\"outline\" className=\"w-full justify-start\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    Manage Staff\n                  </Button>\n                  <Button onClick={() => setActiveTab(\"accounts\")} variant=\"outline\" className=\"w-full justify-start\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    Create Account\n                  </Button>\n                  <Button onClick={() => setActiveTab(\"analytics\")} variant=\"outline\" className=\"w-full justify-start\">\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    View Analytics\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n                <CardHeader>\n                  <CardTitle>System Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Database Connection</span>\n                    <Badge className=\"bg-green-500/20 text-green-400\">Online</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Payment System</span>\n                    <Badge className=\"bg-green-500/20 text-green-400\">Active</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Kitchen Display</span>\n                    <Badge className=\"bg-green-500/20 text-green-400\">Connected</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Last Backup</span>\n                    <span className=\"text-sm text-muted-foreground\">2 hours ago</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"orders\">\n            <OrdersOverview />\n          </TabsContent>\n\n          <TabsContent value=\"menu\">\n            <MenuManagement />\n          </TabsContent>\n\n          <TabsContent value=\"staff\">\n            <StaffManagement />\n          </TabsContent>\n\n          <TabsContent value=\"accounts\">\n            <AccountCreation />\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <SalesAnalytics />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":11806},"components/admin/menu-management.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Plus, Edit, Trash2, Utensils } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface MenuItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  category: string\n  image_url?: string\n  is_available: boolean\n  preparation_time: number\n  ingredients?: string[]\n  allergens?: string[]\n}\n\nexport function MenuManagement() {\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([])\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)\n  const [editingItem, setEditingItem] = useState<MenuItem | null>(null)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    preparation_time: \"15\",\n    is_available: true,\n  })\n\n  const supabase = createClient()\n  const { toast } = useToast()\n\n  const categories = [\"Pizza\", \"Salads\", \"Main Course\", \"Desserts\", \"Beverages\", \"Appetizers\"]\n\n  useEffect(() => {\n    fetchMenuItems()\n  }, [])\n\n  const fetchMenuItems = async () => {\n    try {\n      const { data, error } = await supabase.from(\"menu_items\").select(\"*\").order(\"category\", { ascending: true })\n\n      if (error) throw error\n      setMenuItems(data || [])\n    } catch (error) {\n      console.error(\"Error fetching menu items:\", error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    try {\n      const itemData = {\n        name: formData.name,\n        description: formData.description,\n        price: Number.parseFloat(formData.price),\n        category: formData.category,\n        preparation_time: Number.parseInt(formData.preparation_time),\n        is_available: formData.is_available,\n      }\n\n      if (editingItem) {\n        const { error } = await supabase.from(\"menu_items\").update(itemData).eq(\"id\", editingItem.id)\n\n        if (error) throw error\n\n        toast({\n          title: \"Menu Item Updated\",\n          description: \"Menu item has been updated successfully.\",\n        })\n      } else {\n        const { error } = await supabase.from(\"menu_items\").insert(itemData)\n\n        if (error) throw error\n\n        toast({\n          title: \"Menu Item Added\",\n          description: \"New menu item has been added successfully.\",\n        })\n      }\n\n      setFormData({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        category: \"\",\n        preparation_time: \"15\",\n        is_available: true,\n      })\n      setIsAddDialogOpen(false)\n      setEditingItem(null)\n      fetchMenuItems()\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save menu item.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleEdit = (item: MenuItem) => {\n    setEditingItem(item)\n    setFormData({\n      name: item.name,\n      description: item.description,\n      price: item.price.toString(),\n      category: item.category,\n      preparation_time: item.preparation_time.toString(),\n      is_available: item.is_available,\n    })\n    setIsAddDialogOpen(true)\n  }\n\n  const handleDelete = async (itemId: string) => {\n    if (!confirm(\"Are you sure you want to delete this menu item?\")) return\n\n    try {\n      const { error } = await supabase.from(\"menu_items\").delete().eq(\"id\", itemId)\n\n      if (error) throw error\n\n      toast({\n        title: \"Menu Item Deleted\",\n        description: \"Menu item has been deleted successfully.\",\n      })\n\n      fetchMenuItems()\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete menu item.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const toggleAvailability = async (itemId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase.from(\"menu_items\").update({ is_available: !currentStatus }).eq(\"id\", itemId)\n\n      if (error) throw error\n\n      toast({\n        title: \"Availability Updated\",\n        description: `Menu item is now ${!currentStatus ? \"available\" : \"unavailable\"}.`,\n      })\n\n      fetchMenuItems()\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update availability.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const groupedItems = menuItems.reduce(\n    (acc, item) => {\n      if (!acc[item.category]) {\n        acc[item.category] = []\n      }\n      acc[item.category].push(item)\n      return acc\n    },\n    {} as Record<string, MenuItem[]>,\n  )\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Menu Management</h2>\n          <p className=\"text-muted-foreground\">Manage restaurant menu items and categories</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Menu Item\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingItem ? \"Edit Menu Item\" : \"Add New Menu Item\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Item Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={3}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData.price}\n                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"prep_time\">Prep Time (min)</Label>\n                  <Input\n                    id=\"prep_time\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.preparation_time}\n                    onChange={(e) => setFormData({ ...formData, preparation_time: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <Select\n                  value={formData.category}\n                  onValueChange={(value) => setFormData({ ...formData, category: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"available\"\n                  checked={formData.is_available}\n                  onCheckedChange={(checked) => setFormData({ ...formData, is_available: checked })}\n                />\n                <Label htmlFor=\"available\">Available</Label>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  {editingItem ? \"Update\" : \"Add\"} Item\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsAddDialogOpen(false)\n                    setEditingItem(null)\n                    setFormData({\n                      name: \"\",\n                      description: \"\",\n                      price: \"\",\n                      category: \"\",\n                      preparation_time: \"15\",\n                      is_available: true,\n                    })\n                  }}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-6\">\n        {Object.entries(groupedItems).map(([category, items]) => (\n          <Card key={category} className=\"bg-card/50 backdrop-blur-sm border-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Utensils className=\"w-5 h-5\" />\n                {category}\n                <Badge variant=\"secondary\">{items.length} items</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {items.map((item) => (\n                  <Card key={item.id} className=\"bg-background/50\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h4 className=\"font-semibold\">{item.name}</h4>\n                        <Badge\n                          variant={item.is_available ? \"default\" : \"secondary\"}\n                          className={\n                            item.is_available ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                          }\n                        >\n                          {item.is_available ? \"Available\" : \"Unavailable\"}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{item.description}</p>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <span className=\"font-bold text-primary\">${item.price.toFixed(2)}</span>\n                        <span className=\"text-xs text-muted-foreground\">{item.preparation_time} min</span>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(item)}>\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleAvailability(item.id, item.is_available)}\n                          className={\n                            item.is_available\n                              ? \"text-red-500 hover:text-red-600\"\n                              : \"text-green-500 hover:text-green-600\"\n                          }\n                        >\n                          {item.is_available ? \"Disable\" : \"Enable\"}\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(item.id)}\n                          className=\"text-red-500 hover:text-red-600\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","size_bytes":12709},"components/admin/orders-overview.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { ReceiptButton } from \"../ui/receipt-button\"\nimport { Clock, User, MapPin, DollarSign } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Order {\n  id: string\n  table_number: number\n  customer_name?: string\n  status: string\n  total_amount: number\n  created_at: string\n  waiter: {\n    first_name: string\n    last_name: string\n  }\n  order_items: {\n    id: string\n    quantity: number\n    menu_item: {\n      name: string\n    }\n  }[]\n}\n\nexport function OrdersOverview() {\n  const [orders, setOrders] = useState<Order[]>([])\n  const [statusFilter, setStatusFilter] = useState(\"all\")\n  const [loading, setLoading] = useState(true)\n\n  const supabase = createClient()\n  const { toast } = useToast()\n\n  useEffect(() => {\n    fetchOrders()\n\n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(\"admin_orders\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"orders\" }, () => fetchOrders())\n      .subscribe()\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [])\n\n  const fetchOrders = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"orders\")\n        .select(`\n          *,\n          waiter:users!orders_waiter_id_fkey (\n            first_name,\n            last_name\n          ),\n          order_items (\n            id,\n            quantity,\n            menu_item:menu_items (\n              name\n            )\n          )\n        `)\n        .order(\"created_at\", { ascending: false })\n\n      if (error) throw error\n      setOrders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateOrderStatus = async (orderId: string, newStatus: string) => {\n    try {\n      const { error } = await supabase.from(\"orders\").update({ status: newStatus }).eq(\"id\", orderId)\n\n      if (error) throw error\n\n      toast({\n        title: \"Order Updated\",\n        description: `Order status changed to ${newStatus}.`,\n      })\n\n      fetchOrders()\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-500/20 text-yellow-400\"\n      case \"confirmed\":\n        return \"bg-blue-500/20 text-blue-400\"\n      case \"preparing\":\n        return \"bg-orange-500/20 text-orange-400\"\n      case \"ready\":\n        return \"bg-green-500/20 text-green-400\"\n      case \"served\":\n        return \"bg-purple-500/20 text-purple-400\"\n      case \"paid\":\n        return \"bg-green-600/20 text-green-300\"\n      case \"cancelled\":\n        return \"bg-red-500/20 text-red-400\"\n      default:\n        return \"bg-gray-500/20 text-gray-400\"\n    }\n  }\n\n  const getTimeAgo = (dateString: string) => {\n    const now = new Date()\n    const orderTime = new Date(dateString)\n    const diffInMinutes = Math.floor((now.getTime() - orderTime.getTime()) / (1000 * 60))\n\n    if (diffInMinutes < 1) return \"Just now\"\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`\n    const hours = Math.floor(diffInMinutes / 60)\n    return `${hours}h ${diffInMinutes % 60}m ago`\n  }\n\n  const filteredOrders = orders.filter((order) => statusFilter === \"all\" || order.status === statusFilter)\n\n  const statusOptions = [\n    { value: \"all\", label: \"All Orders\" },\n    { value: \"pending\", label: \"Pending\" },\n    { value: \"confirmed\", label: \"Confirmed\" },\n    { value: \"preparing\", label: \"Preparing\" },\n    { value: \"ready\", label: \"Ready\" },\n    { value: \"served\", label: \"Served\" },\n    { value: \"paid\", label: \"Paid\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n  ]\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading orders...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Orders Overview</h2>\n          <p className=\"text-muted-foreground\">Monitor and manage all restaurant orders</p>\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {statusOptions.map((option) => (\n              <SelectItem key={option.value} value={option.value}>\n                {option.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n        <CardHeader>\n          <CardTitle>Recent Orders ({filteredOrders.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Order Details</TableHead>\n                <TableHead>Items</TableHead>\n                <TableHead>Waiter</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Total</TableHead>\n                <TableHead>Time</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredOrders.map((order) => (\n                <TableRow key={order.id}>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"w-3 h-3 text-muted-foreground\" />\n                        <span className=\"font-medium\">Table {order.table_number}</span>\n                      </div>\n                      {order.customer_name && (\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <User className=\"w-3 h-3\" />\n                          {order.customer_name}\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {order.order_items.slice(0, 2).map((item, index) => (\n                        <div key={item.id}>\n                          {item.quantity}x {item.menu_item.name}\n                        </div>\n                      ))}\n                      {order.order_items.length > 2 && (\n                        <div className=\"text-muted-foreground\">+{order.order_items.length - 2} more items</div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {order.waiter.first_name} {order.waiter.last_name}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getStatusColor(order.status)}>{order.status}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <DollarSign className=\"w-3 h-3\" />\n                      {order.total_amount.toFixed(2)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                      <Clock className=\"w-3 h-3\" />\n                      {getTimeAgo(order.created_at)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-1\">\n                      <ReceiptButton orderId={order.id} />\n                      {order.status === \"pending\" && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => updateOrderStatus(order.id, \"confirmed\")}>\n                          Confirm\n                        </Button>\n                      )}\n                      {order.status === \"confirmed\" && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => updateOrderStatus(order.id, \"preparing\")}>\n                          Prepare\n                        </Button>\n                      )}\n                      {order.status === \"preparing\" && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => updateOrderStatus(order.id, \"ready\")}>\n                          Ready\n                        </Button>\n                      )}\n                      {order.status === \"served\" && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => updateOrderStatus(order.id, \"paid\")}>\n                          Mark Paid\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":9499},"components/admin/sales-analytics.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\"\nimport { DollarSign, TrendingUp, ShoppingBag, Clock } from \"lucide-react\"\n\ninterface SalesData {\n  date: string\n  revenue: number\n  orders: number\n}\n\ninterface CategoryData {\n  category: string\n  revenue: number\n  orders: number\n}\n\ninterface Analytics {\n  totalRevenue: number\n  totalOrders: number\n  averageOrderValue: number\n  topSellingItems: Array<{\n    name: string\n    quantity: number\n    revenue: number\n  }>\n  salesByDay: SalesData[]\n  salesByCategory: CategoryData[]\n}\n\nexport function SalesAnalytics() {\n  const [analytics, setAnalytics] = useState<Analytics>({\n    totalRevenue: 0,\n    totalOrders: 0,\n    averageOrderValue: 0,\n    topSellingItems: [],\n    salesByDay: [],\n    salesByCategory: [],\n  })\n  const [timeRange, setTimeRange] = useState(\"7days\")\n  const [loading, setLoading] = useState(true)\n\n  const supabase = createClient()\n\n  useEffect(() => {\n    fetchAnalytics()\n  }, [timeRange])\n\n  const fetchAnalytics = async () => {\n    try {\n      const daysBack = timeRange === \"7days\" ? 7 : timeRange === \"30days\" ? 30 : 90\n      const startDate = new Date()\n      startDate.setDate(startDate.getDate() - daysBack)\n\n      // Fetch orders with items\n      const { data: orders, error } = await supabase\n        .from(\"orders\")\n        .select(`\n          *,\n          order_items (\n            quantity,\n            total_price,\n            menu_item:menu_items (\n              name,\n              category\n            )\n          )\n        `)\n        .gte(\"created_at\", startDate.toISOString())\n        .eq(\"status\", \"paid\")\n\n      if (error) throw error\n\n      // Calculate analytics\n      const totalRevenue = orders?.reduce((sum, order) => sum + order.total_amount, 0) || 0\n      const totalOrders = orders?.length || 0\n      const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0\n\n      // Sales by day\n      const salesByDay: SalesData[] = []\n      for (let i = daysBack - 1; i >= 0; i--) {\n        const date = new Date()\n        date.setDate(date.getDate() - i)\n        const dateStr = date.toISOString().split(\"T\")[0]\n\n        const dayOrders = orders?.filter((order) => order.created_at.startsWith(dateStr)) || []\n\n        salesByDay.push({\n          date: date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" }),\n          revenue: dayOrders.reduce((sum, order) => sum + order.total_amount, 0),\n          orders: dayOrders.length,\n        })\n      }\n\n      // Sales by category\n      const categoryMap = new Map<string, { revenue: number; orders: number }>()\n      orders?.forEach((order) => {\n        order.order_items.forEach((item) => {\n          const category = item.menu_item.category\n          const existing = categoryMap.get(category) || { revenue: 0, orders: 0 }\n          categoryMap.set(category, {\n            revenue: existing.revenue + item.total_price,\n            orders: existing.orders + item.quantity,\n          })\n        })\n      })\n\n      const salesByCategory: CategoryData[] = Array.from(categoryMap.entries()).map(([category, data]) => ({\n        category,\n        revenue: data.revenue,\n        orders: data.orders,\n      }))\n\n      // Top selling items\n      const itemMap = new Map<string, { quantity: number; revenue: number }>()\n      orders?.forEach((order) => {\n        order.order_items.forEach((item) => {\n          const name = item.menu_item.name\n          const existing = itemMap.get(name) || { quantity: 0, revenue: 0 }\n          itemMap.set(name, {\n            quantity: existing.quantity + item.quantity,\n            revenue: existing.revenue + item.total_price,\n          })\n        })\n      })\n\n      const topSellingItems = Array.from(itemMap.entries())\n        .map(([name, data]) => ({ name, ...data }))\n        .sort((a, b) => b.quantity - a.quantity)\n        .slice(0, 5)\n\n      setAnalytics({\n        totalRevenue,\n        totalOrders,\n        averageOrderValue,\n        topSellingItems,\n        salesByDay,\n        salesByCategory,\n      })\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const COLORS = [\"#10b981\", \"#3b82f6\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\", \"#06b6d4\"]\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading analytics...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Sales Analytics</h2>\n          <p className=\"text-muted-foreground\">Track restaurant performance and trends</p>\n        </div>\n        <Select value={timeRange} onValueChange={setTimeRange}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7days\">Last 7 Days</SelectItem>\n            <SelectItem value=\"30days\">Last 30 Days</SelectItem>\n            <SelectItem value=\"90days\">Last 90 Days</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">${analytics.totalRevenue.toFixed(2)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {timeRange === \"7days\" ? \"Last 7 days\" : timeRange === \"30days\" ? \"Last 30 days\" : \"Last 90 days\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{analytics.totalOrders}</div>\n            <p className=\"text-xs text-muted-foreground\">Completed orders</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Order Value</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">${analytics.averageOrderValue.toFixed(2)}</div>\n            <p className=\"text-xs text-muted-foreground\">Per order average</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Daily Average</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">\n              {(analytics.totalOrders / (timeRange === \"7days\" ? 7 : timeRange === \"30days\" ? 30 : 90)).toFixed(1)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Orders per day</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader>\n            <CardTitle>Daily Sales</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.salesByDay}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                <XAxis dataKey=\"date\" stroke=\"rgba(255,255,255,0.6)\" />\n                <YAxis stroke=\"rgba(255,255,255,0.6)\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"rgba(0,0,0,0.8)\",\n                    border: \"1px solid rgba(255,255,255,0.2)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <Bar dataKey=\"revenue\" fill=\"#10b981\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader>\n            <CardTitle>Sales by Category</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={analytics.salesByCategory}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ category, percent }) => `${category} ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"revenue\"\n                >\n                  {analytics.salesByCategory.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"rgba(0,0,0,0.8)\",\n                    border: \"1px solid rgba(255,255,255,0.2)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Top Selling Items */}\n      <Card className=\"bg-card/50 backdrop-blur-sm border-border\">\n        <CardHeader>\n          <CardTitle>Top Selling Items</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {analytics.topSellingItems.map((item, index) => (\n              <div key={item.name} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"secondary\" className=\"w-8 h-8 rounded-full flex items-center justify-center\">\n                    {index + 1}\n                  </Badge>\n                  <span className=\"font-medium\">{item.name}</span>\n                </div>\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <span className=\"text-muted-foreground\">{item.quantity} sold</span>\n                  <span className=\"font-medium\">${item.revenue.toFixed(2)}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":11531},"components/admin/staff-management.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Plus, UserX } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\ninterface Staff {\n  staff_id: string\n  first_name: string\n  last_name: string\n  email?: string\n  created_at: string\n  status: string\n}\n\nexport default function StaffManagement() {\n  const [staff, setStaff] = useState<Staff[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [formData, setFormData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n  })\n\n  const generateStaffId = (firstName: string, lastName: string) => {\n    const now = new Date()\n    const day = now.getDate().toString().padStart(2, \"0\")\n    const month = (now.getMonth() + 1).toString().padStart(2, \"0\")\n    const firstLetter = firstName.charAt(0).toUpperCase()\n    const lastLetter = lastName.charAt(0).toUpperCase()\n    return `${day}${month}${firstLetter}${lastLetter}`\n  }\n\n  const fetchStaff = async () => {\n    try {\n      const { data, error } = await createClient().from(\"staff\").select(\"*\").order(\"created_at\", { ascending: false })\n\n      if (error) {\n        console.error(\"Error fetching staff:\", error)\n        return\n      }\n\n      setStaff(data || [])\n    } catch (error) {\n      console.error(\"Error:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleCreateStaff = async (e: React.FormEvent) => {\n  e.preventDefault()\n\n  const staffId = generateStaffId(formData.first_name, formData.last_name)\n\n  try {\n    // Get the current user\n    const { data: { user } } = await createClient().auth.getUser()\n\n    const { data, error } = await createClient()\n      .from(\"staff\")\n      .insert([\n        {\n          staff_id: staffId,\n          first_name: formData.first_name,\n          last_name: formData.last_name,\n          email: formData.email || null,\n          created_by: user?.id, // Use the actual user UUID\n          status: \"active\",\n        },\n      ])\n      .select()\n\n    if (error) {\n      console.error(\"Error creating staff:\", error)\n      return\n    }\n\n    setFormData({ first_name: \"\", last_name: \"\", email: \"\" })\n    setIsDialogOpen(false)\n    fetchStaff()\n  } catch (error) {\n    console.error(\"Error:\", error)\n  }\n}\n\n  const handleToggleActive = async (staffId: string, currentStatus: string) => {\n    try {\n      const newStatus = currentStatus === \"active\" ? \"inactive\" : \"active\"\n      const { error } = await createClient().from(\"staff\").update({ status: newStatus }).eq(\"staff_id\", staffId)\n\n      if (error) {\n        console.error(\"Error updating staff:\", error)\n        return\n      }\n\n      fetchStaff()\n    } catch (error) {\n      console.error(\"Error:\", error)\n    }\n  }\n\n  useEffect(() => {\n    fetchStaff()\n  }, [])\n\n  if (isLoading) {\n    return <div className=\"p-6\">Loading staff...</div>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Staff Management</h3>\n          <p className=\"text-sm text-muted-foreground\">Create and manage staff accounts with auto-generated IDs</p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Add Staff Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Staff Member</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreateStaff} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"first_name\">First Name</Label>\n                <Input\n                  id=\"first_name\"\n                  value={formData.first_name}\n                  onChange={(e) => setFormData({ ...formData, first_name: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"last_name\">Last Name</Label>\n                <Input\n                  id=\"last_name\"\n                  value={formData.last_name}\n                  onChange={(e) => setFormData({ ...formData, last_name: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email (Optional)</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                />\n              </div>\n              {formData.first_name && formData.last_name && (\n                <div className=\"p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\">Generated Staff ID:</p>\n                  <p className=\"text-lg font-mono\">{generateStaffId(formData.first_name, formData.last_name)}</p>\n                </div>\n              )}\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Create Staff Member\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Staff Members ({staff.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Staff ID</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {staff.map((member) => (\n                <TableRow key={member.staff_id}>\n                  <TableCell className=\"font-mono\">{member.staff_id}</TableCell>\n                  <TableCell>\n                    {member.first_name} {member.last_name}\n                  </TableCell>\n                  <TableCell>{member.email || \"—\"}</TableCell>\n                  <TableCell>\n                    <Badge variant={member.status === \"active\" ? \"default\" : \"secondary\"}>\n                      {member.status === \"active\" ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{new Date(member.created_at).toLocaleDateString()}</TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleToggleActive(member.staff_id, member.status)}\n                      >\n                        <UserX className=\"h-4 w-4\" />\n                        {member.status === \"active\" ? \"Deactivate\" : \"Activate\"}\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {staff.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                    No staff members found. Add your first staff member to get started.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":8286},"components/receipt/receipt-button.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { ReceiptGenerator } from \"./receipt-generator\"\nimport { Receipt } from \"lucide-react\"\n\ninterface ReceiptButtonProps {\n  orderId: string\n  variant?: \"default\" | \"outline\" | \"ghost\"\n  size?: \"sm\" | \"default\" | \"lg\"\n}\n\nexport function ReceiptButton({ orderId, variant = \"outline\", size = \"sm\" }: ReceiptButtonProps) {\n  const [order, setOrder] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n  const supabase = createClient()\n\n  const fetchOrderDetails = async () => {\n    if (loading || order) return\n\n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from(\"orders\")\n        .select(`\n          *,\n          waiter:users!orders_waiter_id_fkey (\n            first_name,\n            last_name\n          ),\n          order_items (\n            *,\n            menu_item:menu_items (\n              name,\n              description\n            )\n          )\n        `)\n        .eq(\"id\", orderId)\n        .single()\n\n      if (error) throw error\n      setOrder(data)\n    } catch (error) {\n      console.error(\"Error fetching order details:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!order) {\n    return (\n      <Button variant={variant} size={size} onClick={fetchOrderDetails} disabled={loading}>\n        <Receipt className=\"w-4 h-4 mr-2\" />\n        {loading ? \"Loading...\" : \"Receipt\"}\n      </Button>\n    )\n  }\n\n  return (\n    <ReceiptGenerator\n      order={order}\n      trigger={\n        <Button variant={variant} size={size}>\n          <Receipt className=\"w-4 h-4 mr-2\" />\n          Receipt\n        </Button>\n      }\n    />\n  )\n}\n","size_bytes":1759},"components/receipt/receipt-generator.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Receipt, Printer, Download, Eye } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface OrderItem {\n  id: string\n  quantity: number\n  unit_price: number\n  total_price: number\n  menu_item: {\n    name: string\n    description: string\n  }\n}\n\ninterface Order {\n  id: string\n  table_number: number\n  customer_name?: string\n  subtotal: number\n  tax_amount: number\n  total_amount: number\n  payment_method?: string\n  created_at: string\n  waiter: {\n    first_name: string\n    last_name: string\n  }\n  order_items: OrderItem[]\n}\n\ninterface ReceiptGeneratorProps {\n  order: Order\n  trigger?: React.ReactNode\n}\n\nexport function ReceiptGenerator({ order, trigger }: ReceiptGeneratorProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isGenerating, setIsGenerating] = useState(false)\n  const { toast } = useToast()\n\n  const generateReceiptHTML = () => {\n    const receiptDate = new Date(order.created_at).toLocaleString()\n\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Receipt - Order #${order.id.slice(-8)}</title>\n          <style>\n            body {\n              font-family: 'Courier New', monospace;\n              max-width: 300px;\n              margin: 0 auto;\n              padding: 20px;\n              background: white;\n              color: black;\n            }\n            .header {\n              text-align: center;\n              border-bottom: 2px solid #000;\n              padding-bottom: 10px;\n              margin-bottom: 15px;\n            }\n            .restaurant-name {\n              font-size: 18px;\n              font-weight: bold;\n              margin-bottom: 5px;\n            }\n            .restaurant-info {\n              font-size: 12px;\n              margin-bottom: 2px;\n            }\n            .order-info {\n              margin-bottom: 15px;\n              font-size: 12px;\n            }\n            .order-info div {\n              margin-bottom: 3px;\n            }\n            .items {\n              margin-bottom: 15px;\n            }\n            .item {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 5px;\n              font-size: 12px;\n            }\n            .item-name {\n              flex: 1;\n              margin-right: 10px;\n            }\n            .item-qty {\n              margin-right: 10px;\n            }\n            .item-price {\n              text-align: right;\n              min-width: 50px;\n            }\n            .totals {\n              border-top: 1px solid #000;\n              padding-top: 10px;\n              margin-top: 15px;\n            }\n            .total-line {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 5px;\n              font-size: 12px;\n            }\n            .final-total {\n              font-weight: bold;\n              font-size: 14px;\n              border-top: 1px solid #000;\n              padding-top: 5px;\n              margin-top: 5px;\n            }\n            .footer {\n              text-align: center;\n              margin-top: 20px;\n              padding-top: 15px;\n              border-top: 1px solid #000;\n              font-size: 11px;\n            }\n            @media print {\n              body { margin: 0; padding: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <div class=\"restaurant-name\">RESTAURANT POS</div>\n            <div class=\"restaurant-info\">123 Main Street</div>\n            <div class=\"restaurant-info\">City, State 12345</div>\n            <div class=\"restaurant-info\">Phone: (555) 123-4567</div>\n          </div>\n          \n          <div class=\"order-info\">\n            <div><strong>Order #:</strong> ${order.id.slice(-8).toUpperCase()}</div>\n            <div><strong>Table:</strong> ${order.table_number}</div>\n            ${order.customer_name ? `<div><strong>Customer:</strong> ${order.customer_name}</div>` : \"\"}\n            <div><strong>Server:</strong> ${order.waiter.first_name} ${order.waiter.last_name}</div>\n            <div><strong>Date:</strong> ${receiptDate}</div>\n          </div>\n          \n          <div class=\"items\">\n            ${order.order_items\n              .map(\n                (item) => `\n              <div class=\"item\">\n                <div class=\"item-name\">${item.menu_item.name}</div>\n                <div class=\"item-qty\">${item.quantity}x</div>\n                <div class=\"item-price\">$${item.total_price.toFixed(2)}</div>\n              </div>\n            `,\n              )\n              .join(\"\")}\n          </div>\n          \n          <div class=\"totals\">\n            <div class=\"total-line\">\n              <span>Subtotal:</span>\n              <span>$${order.subtotal.toFixed(2)}</span>\n            </div>\n            <div class=\"total-line\">\n              <span>Tax (8.75%):</span>\n              <span>$${order.tax_amount.toFixed(2)}</span>\n            </div>\n            <div class=\"total-line final-total\">\n              <span>TOTAL:</span>\n              <span>$${order.total_amount.toFixed(2)}</span>\n            </div>\n            ${\n              order.payment_method\n                ? `\n              <div class=\"total-line\">\n                <span>Payment:</span>\n                <span>${order.payment_method.toUpperCase()}</span>\n              </div>\n            `\n                : \"\"\n            }\n          </div>\n          \n          <div class=\"footer\">\n            <div>Thank you for dining with us!</div>\n            <div>Please come again soon</div>\n            <div style=\"margin-top: 10px;\">★★★★★</div>\n          </div>\n        </body>\n      </html>\n    `\n  }\n\n  const handlePrint = () => {\n    const receiptHTML = generateReceiptHTML()\n    const printWindow = window.open(\"\", \"_blank\")\n    if (printWindow) {\n      printWindow.document.write(receiptHTML)\n      printWindow.document.close()\n      printWindow.focus()\n      printWindow.print()\n      printWindow.close()\n    }\n  }\n\n  const handleDownload = () => {\n    const receiptHTML = generateReceiptHTML()\n    const blob = new Blob([receiptHTML], { type: \"text/html\" })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = `receipt-${order.id.slice(-8)}.html`\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n\n    toast({\n      title: \"Receipt Downloaded\",\n      description: \"Receipt has been saved to your downloads folder.\",\n    })\n  }\n\n  const handlePreview = () => {\n    const receiptHTML = generateReceiptHTML()\n    const previewWindow = window.open(\"\", \"_blank\")\n    if (previewWindow) {\n      previewWindow.document.write(receiptHTML)\n      previewWindow.document.close()\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button variant=\"outline\" size=\"sm\">\n            <Receipt className=\"w-4 h-4 mr-2\" />\n            Receipt\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Generate Receipt</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Receipt Preview */}\n          <Card className=\"bg-white text-black font-mono text-xs\">\n            <CardContent className=\"p-4 max-w-xs mx-auto\">\n              <div className=\"text-center border-b-2 border-black pb-2 mb-3\">\n                <div className=\"font-bold text-sm\">RESTAURANT POS</div>\n                <div className=\"text-xs\">123 Main Street</div>\n                <div className=\"text-xs\">City, State 12345</div>\n                <div className=\"text-xs\">Phone: (555) 123-4567</div>\n              </div>\n\n              <div className=\"mb-3 text-xs\">\n                <div>\n                  <strong>Order #:</strong> {order.id.slice(-8).toUpperCase()}\n                </div>\n                <div>\n                  <strong>Table:</strong> {order.table_number}\n                </div>\n                {order.customer_name && (\n                  <div>\n                    <strong>Customer:</strong> {order.customer_name}\n                  </div>\n                )}\n                <div>\n                  <strong>Server:</strong> {order.waiter.first_name} {order.waiter.last_name}\n                </div>\n                <div>\n                  <strong>Date:</strong> {new Date(order.created_at).toLocaleString()}\n                </div>\n              </div>\n\n              <div className=\"mb-3\">\n                {order.order_items.map((item) => (\n                  <div key={item.id} className=\"flex justify-between mb-1\">\n                    <div className=\"flex-1 mr-2\">{item.menu_item.name}</div>\n                    <div className=\"mr-2\">{item.quantity}x</div>\n                    <div className=\"text-right\">${item.total_price.toFixed(2)}</div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"border-t border-black pt-2\">\n                <div className=\"flex justify-between mb-1\">\n                  <span>Subtotal:</span>\n                  <span>${order.subtotal.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between mb-1\">\n                  <span>Tax (8.75%):</span>\n                  <span>${order.tax_amount.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between font-bold text-sm border-t border-black pt-1 mt-1\">\n                  <span>TOTAL:</span>\n                  <span>${order.total_amount.toFixed(2)}</span>\n                </div>\n                {order.payment_method && (\n                  <div className=\"flex justify-between mt-1\">\n                    <span>Payment:</span>\n                    <span>{order.payment_method.toUpperCase()}</span>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"text-center mt-4 pt-3 border-t border-black\">\n                <div>Thank you for dining with us!</div>\n                <div>Please come again soon</div>\n                <div className=\"mt-2\">★★★★★</div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2\">\n            <Button onClick={handlePrint} className=\"flex-1\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button onClick={handleDownload} variant=\"outline\" className=\"flex-1 bg-transparent\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n            <Button onClick={handlePreview} variant=\"outline\" className=\"flex-1 bg-transparent\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Preview\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","size_bytes":11217},"components/ui/accordion.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn('pt-0 pb-4', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2054},"components/ui/alert-dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn('text-lg font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: 'outline' }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3867},"components/ui/alert.tsx":{"content":"import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        destructive:\n          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1617},"components/ui/aspect-ratio.tsx":{"content":"'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"components/ui/breadcrumb.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { ChevronRight, MoreHorizontal } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<'nav'>) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<'ol'>) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        'text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn('inline-flex items-center gap-1.5', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn('hover:text-foreground transition-colors', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn('text-foreground font-normal', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('[&>svg]:size-3.5', className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2358},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2124},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1992},"components/ui/carousel.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -left-12 -translate-y-1/2'\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -right-12 -translate-y-1/2'\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5562},"components/ui/chart.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >['children']\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: 'line' | 'dot' | 'dashed'\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === 'string'\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                          {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          },\n                        )}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      'flex flex-1 justify-between leading-none',\n                      nestLabel ? 'items-end' : 'items-center',\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3',\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9791},"components/ui/checkbox.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { CheckIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1227},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/command.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { SearchIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = 'Command Palette',\n  description = 'Search for a command to run...',\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn('overflow-hidden p-0', className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('bg-border -mx-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4824},"components/ui/context-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8230},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"components/ui/drawer.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@/lib/utils'\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',\n          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',\n          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',\n          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',\n          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4258},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8292},"components/ui/form.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3761},"components/ui/hover-card.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card'\n\nimport { cn } from '@/lib/utils'\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1533},"components/ui/input-otp.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        'flex items-center gap-2 has-disabled:opacity-50',\n        containerClassName,\n      )}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn('flex items-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2256},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":968},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/ui/menubar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = 'start',\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8404},"components/ui/navigation-menu.tsx":{"content":"import * as React from 'react'\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'\nimport { cva } from 'class-variance-authority'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        'group flex flex-1 list-none items-center justify-center gap-1',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), 'group', className)}\n      {...props}\n    >\n      {children}{' '}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',\n        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        'absolute top-full left-0 isolate z-50 flex justify-center',\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6672},"components/ui/pagination.tsx":{"content":"import * as React from 'react'\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Pagination({ className, ...props }: React.ComponentProps<'nav'>) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn('flex flex-row items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<'li'>) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, 'size'> &\n  React.ComponentProps<'a'>\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? 'page' : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? 'outline' : 'ghost',\n          size,\n        }),\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2713},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/radio-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\nimport { CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn('grid gap-3', className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"components/ui/receipt-button.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { ReceiptGenerator } from \"@/components/receipt/receipt-generator\"\nimport { Receipt } from \"lucide-react\"\n\ninterface ReceiptButtonProps {\n  orderId: string\n  variant?: \"default\" | \"outline\" | \"ghost\"\n  size?: \"sm\" | \"default\" | \"lg\"\n}\n\nexport function ReceiptButton({ orderId, variant = \"outline\", size = \"sm\" }: ReceiptButtonProps) {\n  const [order, setOrder] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n  const supabase = createClient()\n\n  const fetchOrderDetails = async () => {\n    if (loading || order) return\n\n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from(\"orders\")\n        .select(`\n          *,\n          waiter:users!orders_waiter_id_fkey (\n            first_name,\n            last_name\n          ),\n          order_items (\n            *,\n            menu_item:menu_items (\n              name,\n              description\n            )\n          )\n        `)\n        .eq(\"id\", orderId)\n        .single()\n\n      if (error) throw error\n      setOrder(data)\n    } catch (error) {\n      console.error(\"Error fetching order details:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!order) {\n    return (\n      <Button variant={variant} size={size} onClick={fetchOrderDetails} disabled={loading}>\n        <Receipt className=\"w-4 h-4 mr-2\" />\n        {loading ? \"Loading...\" : \"Receipt\"}\n      </Button>\n    )\n  }\n\n  return (\n    <ReceiptGenerator\n      order={order}\n      trigger={\n        <Button variant={variant} size={size}>\n          <Receipt className=\"w-4 h-4 mr-2\" />\n          Receipt\n        </Button>\n      }\n    />\n  )\n}\n","size_bytes":1778},"components/ui/resizable.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { GripVerticalIcon } from 'lucide-react'\nimport * as ResizablePrimitive from 'react-resizable-panels'\n\nimport { cn } from '@/lib/utils'\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',\n        className,\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2030},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/sheet.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = 'right',\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n          side === 'right' &&\n            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',\n          side === 'left' &&\n            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',\n          side === 'top' &&\n            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',\n          side === 'bottom' &&\n            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn('flex flex-col gap-1.5 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4092},"components/ui/sidebar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { PanelLeftIcon } from 'lucide-react'\n\nimport { useIsMobile } from '@/hooks/use-mobile'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = '16rem'\nconst SIDEBAR_WIDTH_MOBILE = '18rem'\nconst SIDEBAR_WIDTH_ICON = '3rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n  state: 'expanded' | 'collapsed'\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.')\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === 'function' ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? 'expanded' : 'collapsed'\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH,\n              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = 'left',\n  variant = 'sidebar',\n  collapsible = 'offcanvas',\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  side?: 'left' | 'right'\n  variant?: 'sidebar' | 'floating' | 'inset'\n  collapsible?: 'offcanvas' | 'icon' | 'none'\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === 'none') {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === 'collapsed' ? collapsible : ''}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',\n          'group-data-[collapsible=offcanvas]:w-0',\n          'group-data-[side=right]:rotate-180',\n          variant === 'floating' || variant === 'inset'\n            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',\n          side === 'left'\n            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n          // Adjust the padding for floating and inset variants.\n          variant === 'floating' || variant === 'inset'\n            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn('size-7', className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',\n        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',\n        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',\n        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        'bg-background relative flex w-full flex-1 flex-col',\n        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn('bg-background h-8 w-full shadow-none', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn('bg-sidebar-border mx-2 w-auto', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = 'default',\n  size = 'default',\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : 'button'\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === 'string') {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== 'collapsed' || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<'div'> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn('group/menu-sub-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = 'md',\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n  size?: 'sm' | 'md'\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21649},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5',\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full',\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":2005},"components/ui/sonner.tsx":{"content":"'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/switch.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0',\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1179},"components/ui/table.tsx":{"content":"'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2452},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/toggle-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { toggleVariants } from '@/components/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: 'default',\n  variant: 'default',\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1927},"components/ui/toggle.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1571},"components/ui/tooltip.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1892},"components/ui/use-mobile.tsx":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"components/ui/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"components/waiter/active-orders.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { ReceiptButton } from \"../ui/receipt-button\"\nimport { Clock, User, MapPin } from \"lucide-react\"\n\ninterface Order {\n  id: string\n  table_number: number\n  customer_name?: string\n  status: string\n  total_amount: number\n  created_at: string\n  order_items: {\n    id: string\n    quantity: number\n    menu_item: {\n      name: string\n    }\n  }[]\n}\n\nexport function ActiveOrders() {\n  const [orders, setOrders] = useState<Order[]>([])\n  const [loading, setLoading] = useState(true)\n  const supabase = createClient()\n\n  useEffect(() => {\n    fetchActiveOrders()\n\n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(\"orders\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"orders\" }, () => fetchActiveOrders())\n      .subscribe()\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [])\n\n  const fetchActiveOrders = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n\n      if (!user) return\n\n      const { data, error } = await supabase\n        .from(\"orders\")\n        .select(`\n          *,\n          order_items (\n            id,\n            quantity,\n            menu_item:menu_items (\n              name\n            )\n          )\n        `)\n        .eq(\"waiter_id\", user.id)\n        .in(\"status\", [\"pending\", \"confirmed\", \"preparing\", \"ready\"])\n        .order(\"created_at\", { ascending: false })\n\n      if (error) throw error\n\n      setOrders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateOrderStatus = async (orderId: string, newStatus: string) => {\n    try {\n      const { error } = await supabase.from(\"orders\").update({ status: newStatus }).eq(\"id\", orderId)\n\n      if (error) throw error\n\n      fetchActiveOrders()\n    } catch (error) {\n      console.error(\"Error updating order status:\", error)\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-500/20 text-yellow-400\"\n      case \"confirmed\":\n        return \"bg-blue-500/20 text-blue-400\"\n      case \"preparing\":\n        return \"bg-orange-500/20 text-orange-400\"\n      case \"ready\":\n        return \"bg-green-500/20 text-green-400\"\n      default:\n        return \"bg-gray-500/20 text-gray-400\"\n    }\n  }\n\n  const getTimeAgo = (dateString: string) => {\n    const now = new Date()\n    const orderTime = new Date(dateString)\n    const diffInMinutes = Math.floor((now.getTime() - orderTime.getTime()) / (1000 * 60))\n\n    if (diffInMinutes < 1) return \"Just now\"\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`\n    const hours = Math.floor(diffInMinutes / 60)\n    return `${hours}h ${diffInMinutes % 60}m ago`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading orders...</div>\n      </div>\n    )\n  }\n\n  if (orders.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Clock className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No Active Orders</h3>\n        <p className=\"text-muted-foreground\">All orders have been completed or there are no pending orders.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {orders.map((order) => (\n        <Card key={order.id} className=\"bg-card/50 backdrop-blur-sm border-border\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4\" />\n                  Table {order.table_number}\n                </div>\n              </CardTitle>\n              <Badge className={getStatusColor(order.status)}>{order.status}</Badge>\n            </div>\n            {order.customer_name && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <User className=\"w-3 h-3\" />\n                {order.customer_name}\n              </div>\n            )}\n          </CardHeader>\n\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              {order.order_items.map((item) => (\n                <div key={item.id} className=\"flex justify-between text-sm\">\n                  <span>\n                    {item.quantity}x {item.menu_item.name}\n                  </span>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-1 text-muted-foreground\">\n                <Clock className=\"w-3 h-3\" />\n                {getTimeAgo(order.created_at)}\n              </div>\n              <div className=\"font-semibold\">${order.total_amount.toFixed(2)}</div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <ReceiptButton orderId={order.id} size=\"sm\" />\n              {order.status === \"ready\" && (\n                <Button\n                  onClick={() => updateOrderStatus(order.id, \"served\")}\n                  className=\"flex-1 bg-primary hover:bg-primary/90\"\n                  size=\"sm\"\n                >\n                  Mark as Served\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","size_bytes":5827},"components/waiter/menu-grid.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus } from \"lucide-react\"\n\ninterface MenuItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  category: string\n  image_url?: string\n  is_available: boolean\n}\n\ninterface MenuGridProps {\n  items: MenuItem[]\n  onAddToOrder: (item: MenuItem, quantity?: number) => void\n}\n\nexport function MenuGrid({ items, onAddToOrder }: MenuGridProps) {\n  const groupedItems = items.reduce(\n    (acc, item) => {\n      if (!acc[item.category]) {\n        acc[item.category] = []\n      }\n      acc[item.category].push(item)\n      return acc\n    },\n    {} as Record<string, MenuItem[]>,\n  )\n\n  return (\n    <div className=\"space-y-8\">\n      {Object.entries(groupedItems).map(([category, categoryItems]) => (\n        <div key={category}>\n          <h2 className=\"text-2xl font-bold mb-4 text-foreground\">{category}</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {categoryItems.map((item) => (\n              <Card\n                key={item.id}\n                className=\"group hover:shadow-lg transition-all duration-200 border-border bg-card/50 backdrop-blur-sm\"\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex flex-col h-full\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"font-semibold text-lg text-foreground line-clamp-2\">{item.name}</h3>\n                        <Badge variant=\"secondary\" className=\"ml-2 bg-primary/20 text-primary\">\n                          ${item.price.toFixed(2)}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-3 mb-4\">{item.description}</p>\n                    </div>\n                    <Button\n                      onClick={() => onAddToOrder(item)}\n                      className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                      size=\"sm\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add to Order\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n","size_bytes":2505},"components/waiter/order-sidebar.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Minus, Plus, Trash2, ShoppingCart } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { ReceiptButton } from \"@/components/ui/receipt-button\" // Assuming ReceiptButton is imported from this path\n\ninterface MenuItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  category: string\n  image_url?: string\n  is_available: boolean\n}\n\ninterface OrderItem {\n  id: string\n  menu_item_id: string\n  quantity: number\n  unit_price: number\n  total_price: number\n  special_requests?: string\n  menu_item: MenuItem\n}\n\ninterface CurrentOrder {\n  items: OrderItem[]\n  table_number: number\n  customer_name?: string\n  special_instructions?: string\n}\n\ninterface OrderSidebarProps {\n  currentOrder: CurrentOrder\n  onUpdateOrder: (order: CurrentOrder) => void\n  onUpdateItem: (itemId: string, quantity: number) => void\n  onRemoveItem: (itemId: string) => void\n  orderTotal: number\n}\n\nexport function OrderSidebar({\n  currentOrder,\n  onUpdateOrder,\n  onUpdateItem,\n  onRemoveItem,\n  orderTotal,\n}: OrderSidebarProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [submittedOrderId, setSubmittedOrderId] = useState<string | null>(null)\n  const { toast } = useToast()\n  const supabase = createClient()\n\n  const handleSubmitOrder = async () => {\n    if (currentOrder.items.length === 0) {\n      toast({\n        title: \"Empty Order\",\n        description: \"Please add items to the order before submitting.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsSubmitting(true)\n\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n\n      if (!user) {\n        throw new Error(\"User not authenticated\")\n      }\n\n      // Create the order\n      const { data: order, error: orderError } = await supabase\n        .from(\"orders\")\n        .insert({\n          waiter_id: user.id,\n          table_number: currentOrder.table_number,\n          customer_name: currentOrder.customer_name,\n          special_instructions: currentOrder.special_instructions,\n          status: \"pending\",\n          order_type: \"dine-in\",\n        })\n        .select()\n        .single()\n\n      if (orderError) throw orderError\n\n      // Create order items\n      const orderItems = currentOrder.items.map((item) => ({\n        order_id: order.id,\n        menu_item_id: item.menu_item_id,\n        quantity: item.quantity,\n        unit_price: item.unit_price,\n        total_price: item.total_price,\n        special_requests: item.special_requests,\n      }))\n\n      const { error: itemsError } = await supabase.from(\"order_items\").insert(orderItems)\n\n      if (itemsError) throw itemsError\n\n      // Store the submitted order ID for receipt generation\n      setSubmittedOrderId(order.id)\n\n      // Clear the current order\n      onUpdateOrder({\n        items: [],\n        table_number: currentOrder.table_number + 1,\n      })\n\n      toast({\n        title: \"Order Submitted\",\n        description: `Order for table ${order.table_number} has been submitted successfully.`,\n      })\n    } catch (error) {\n      console.error(\"Error submitting order:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit order. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const taxAmount = orderTotal * 0.0875 // 8.75% tax\n  const finalTotal = orderTotal + taxAmount\n\n  return (\n    <div className=\"w-96 border-l border-border bg-card/30 backdrop-blur-sm flex flex-col\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <ShoppingCart className=\"w-5 h-5\" />\n          Current Order\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col gap-4\">\n        {/* Order Details */}\n        <div className=\"space-y-3\">\n          <div>\n            <Label htmlFor=\"table-number\">Table Number</Label>\n            <Input\n              id=\"table-number\"\n              type=\"number\"\n              min=\"1\"\n              value={currentOrder.table_number}\n              onChange={(e) =>\n                onUpdateOrder({\n                  ...currentOrder,\n                  table_number: Number.parseInt(e.target.value) || 1,\n                })\n              }\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"customer-name\">Customer Name (Optional)</Label>\n            <Input\n              id=\"customer-name\"\n              value={currentOrder.customer_name || \"\"}\n              onChange={(e) =>\n                onUpdateOrder({\n                  ...currentOrder,\n                  customer_name: e.target.value,\n                })\n              }\n              className=\"mt-1\"\n              placeholder=\"Enter customer name\"\n            />\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Order Items */}\n        <div className=\"flex-1 overflow-y-auto space-y-3\">\n          {currentOrder.items.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <ShoppingCart className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n              <p>No items in order</p>\n              <p className=\"text-sm\">Add items from the menu</p>\n            </div>\n          ) : (\n            currentOrder.items.map((item) => (\n              <Card key={item.id} className=\"bg-background/50\">\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h4 className=\"font-medium text-sm\">{item.menu_item.name}</h4>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveItem(item.id)}\n                      className=\"h-6 w-6 p-0 text-muted-foreground hover:text-destructive\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateItem(item.id, item.quantity - 1)}\n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"text-sm font-medium w-8 text-center\">{item.quantity}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateItem(item.id, item.quantity + 1)}\n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                    <Badge variant=\"secondary\">${item.total_price.toFixed(2)}</Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Special Instructions */}\n        <div>\n          <Label htmlFor=\"special-instructions\">Special Instructions</Label>\n          <Textarea\n            id=\"special-instructions\"\n            value={currentOrder.special_instructions || \"\"}\n            onChange={(e) =>\n              onUpdateOrder({\n                ...currentOrder,\n                special_instructions: e.target.value,\n              })\n            }\n            className=\"mt-1 resize-none\"\n            rows={2}\n            placeholder=\"Any special requests...\"\n          />\n        </div>\n\n        <Separator />\n\n        {/* Order Summary */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Subtotal:</span>\n            <span>${orderTotal.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Tax (8.75%):</span>\n            <span>${taxAmount.toFixed(2)}</span>\n          </div>\n          <Separator />\n          <div className=\"flex justify-between font-semibold\">\n            <span>Total:</span>\n            <span>${finalTotal.toFixed(2)}</span>\n          </div>\n        </div>\n\n        {/* Submit Button */}\n        <Button\n          onClick={handleSubmitOrder}\n          disabled={isSubmitting || currentOrder.items.length === 0}\n          className=\"w-full bg-primary hover:bg-primary/90\"\n        >\n          {isSubmitting ? \"Submitting...\" : \"Submit Order\"}\n        </Button>\n\n        {/* Receipt Generation */}\n        {submittedOrderId && (\n          <div className=\"mt-4 p-3 bg-green-500/10 border border-green-500/20 rounded-md\">\n            <p className=\"text-sm text-green-400 mb-2\">Order submitted successfully!</p>\n            <ReceiptButton orderId={submittedOrderId} variant=\"outline\" />\n          </div>\n        )}\n      </CardContent>\n    </div>\n  )\n}\n","size_bytes":9473},"components/waiter/waiter-dashboard.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { MenuGrid } from \"./menu-grid\"\nimport { OrderSidebar } from \"./order-sidebar\"\nimport { ActiveOrders } from \"./active-orders\"\nimport { Clock, User, LogOut, Search, Plus, Utensils } from \"lucide-react\"\n\ninterface MenuItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  category: string\n  image_url?: string\n  is_available: boolean\n}\n\ninterface OrderItem {\n  id: string\n  menu_item_id: string\n  quantity: number\n  unit_price: number\n  total_price: number\n  special_requests?: string\n  menu_item: MenuItem\n}\n\ninterface CurrentOrder {\n  items: OrderItem[]\n  table_number: number\n  customer_name?: string\n  special_instructions?: string\n}\n\nexport function WaiterDashboard() {\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([])\n  const [currentOrder, setCurrentOrder] = useState<CurrentOrder>({\n    items: [],\n    table_number: 1,\n  })\n  const [activeView, setActiveView] = useState<\"menu\" | \"orders\">(\"menu\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\")\n  const [user, setUser] = useState<any>(null)\n\n  const supabase = createClient()\n\n  useEffect(() => {\n    fetchMenuItems()\n    getCurrentUser()\n  }, [])\n\n  const getCurrentUser = async () => {\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    if (user) {\n      const { data: profile } = await supabase.from(\"users\").select(\"*\").eq(\"id\", user.id).single()\n      setUser({ ...user, profile })\n    }\n  }\n\n  const fetchMenuItems = async () => {\n    const { data, error } = await supabase\n      .from(\"menu_items\")\n      .select(\"*\")\n      .eq(\"is_available\", true)\n      .order(\"category\", { ascending: true })\n\n    if (data) {\n      setMenuItems(data)\n    }\n  }\n\n  const addToOrder = (menuItem: MenuItem, quantity = 1) => {\n    const existingItemIndex = currentOrder.items.findIndex((item) => item.menu_item_id === menuItem.id)\n\n    if (existingItemIndex >= 0) {\n      const updatedItems = [...currentOrder.items]\n      updatedItems[existingItemIndex].quantity += quantity\n      updatedItems[existingItemIndex].total_price = updatedItems[existingItemIndex].quantity * menuItem.price\n\n      setCurrentOrder({\n        ...currentOrder,\n        items: updatedItems,\n      })\n    } else {\n      const newItem: OrderItem = {\n        id: `temp-${Date.now()}`,\n        menu_item_id: menuItem.id,\n        quantity,\n        unit_price: menuItem.price,\n        total_price: menuItem.price * quantity,\n        menu_item: menuItem,\n      }\n\n      setCurrentOrder({\n        ...currentOrder,\n        items: [...currentOrder.items, newItem],\n      })\n    }\n  }\n\n  const removeFromOrder = (itemId: string) => {\n    setCurrentOrder({\n      ...currentOrder,\n      items: currentOrder.items.filter((item) => item.id !== itemId),\n    })\n  }\n\n  const updateOrderItem = (itemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromOrder(itemId)\n      return\n    }\n\n    const updatedItems = currentOrder.items.map((item) => {\n      if (item.id === itemId) {\n        return {\n          ...item,\n          quantity,\n          total_price: item.unit_price * quantity,\n        }\n      }\n      return item\n    })\n\n    setCurrentOrder({\n      ...currentOrder,\n      items: updatedItems,\n    })\n  }\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  const categories = [\"all\", ...new Set(menuItems.map((item) => item.category))]\n\n  const filteredItems = menuItems.filter((item) => {\n    const matchesSearch =\n      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.description?.toLowerCase().includes(searchQuery.toLowerCase())\n    const matchesCategory = selectedCategory === \"all\" || item.category === selectedCategory\n    return matchesSearch && matchesCategory\n  })\n\n  const orderTotal = currentOrder.items.reduce((sum, item) => sum + item.total_price, 0)\n\n  return (\n    <div className=\"min-h-screen bg-background grid-pattern\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Utensils className=\"w-8 h-8 text-primary\" />\n              <h1 className=\"text-2xl font-bold\">Restaurant POS</h1>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-primary/20 text-primary\">\n              Waiter Dashboard\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <User className=\"w-4 h-4\" />\n              <span>\n                {user?.profile?.first_name} {user?.profile?.last_name}\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleSignOut}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-73px)]\">\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Navigation */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={activeView === \"menu\" ? \"default\" : \"ghost\"}\n                onClick={() => setActiveView(\"menu\")}\n                className=\"gap-2\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                New Order\n              </Button>\n              <Button\n                variant={activeView === \"orders\" ? \"default\" : \"ghost\"}\n                onClick={() => setActiveView(\"orders\")}\n                className=\"gap-2\"\n              >\n                <Clock className=\"w-4 h-4\" />\n                Active Orders\n              </Button>\n            </div>\n\n            {activeView === \"menu\" && (\n              <div className=\"flex items-center gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search menu items...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 w-64\"\n                  />\n                </div>\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"px-3 py-2 bg-input border border-border rounded-md text-sm\"\n                >\n                  {categories.map((category) => (\n                    <option key={category} value={category}>\n                      {category === \"all\" ? \"All Categories\" : category}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n          </div>\n\n          {/* Content Area */}\n          <div className=\"flex-1 p-4\">\n            {activeView === \"menu\" ? <MenuGrid items={filteredItems} onAddToOrder={addToOrder} /> : <ActiveOrders />}\n          </div>\n        </div>\n\n        {/* Order Sidebar */}\n        {activeView === \"menu\" && (\n          <OrderSidebar\n            currentOrder={currentOrder}\n            onUpdateOrder={setCurrentOrder}\n            onUpdateItem={updateOrderItem}\n            onRemoveItem={removeFromOrder}\n            orderTotal={orderTotal}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":8023},"lib/firebase/auth.ts":{"content":"import { \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  User as FirebaseUser\n} from 'firebase/auth'\nimport { \n  doc, \n  setDoc, \n  getDoc,\n  collection,\n  query,\n  where,\n  getDocs \n} from 'firebase/firestore'\nimport { auth, db } from './config'\nimport bcrypt from 'bcryptjs'\n\nexport interface User {\n  id: string\n  email: string\n  firstName: string\n  lastName: string\n  fullName: string\n  userPassword: string // Generated ID that serves as password\n  role: 'admin' | 'waiter'\n  isActive?: boolean\n  createdAt?: Date\n}\n\n// Create user with generated ID (only for admin use)\nexport async function createUserWithGeneratedId(\n  firstName: string, \n  lastName: string, \n  role: 'admin' | 'waiter' = 'waiter'\n): Promise<{ user: User, generatedId: string } | null> {\n  try {\n    const { generateUserId } = await import('../utils/id-generator')\n    const generatedId = generateUserId(firstName, lastName)\n    const fullName = `${firstName} ${lastName}`\n    const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@restaurant.com`\n\n    // Create auth user with generated ID as password\n    const userCredential = await createUserWithEmailAndPassword(auth, email, generatedId)\n    const firebaseUser = userCredential.user\n\n    // Create user profile in Firestore\n    const userRef = doc(db, 'users', firebaseUser.uid)\n    await setDoc(userRef, {\n      email,\n      firstName,\n      lastName,\n      fullName,\n      userPassword: generatedId,\n      role,\n      isActive: true,\n      createdAt: new Date()\n    })\n\n    const newUser: User = {\n      id: firebaseUser.uid,\n      email,\n      firstName,\n      lastName,\n      fullName,\n      userPassword: generatedId,\n      role,\n      isActive: true,\n      createdAt: new Date()\n    }\n\n    return { user: newUser, generatedId }\n  } catch (error) {\n    console.error('Error creating user:', error)\n    return null\n  }\n}\n\n// Create user document in Firestore (for admin)\nexport async function createUserProfile(user: FirebaseUser, additionalData: Partial<User> = {}) {\n  if (!user) return\n\n  const userRef = doc(db, 'users', user.uid)\n  const userSnapshot = await getDoc(userRef)\n\n  if (!userSnapshot.exists()) {\n    const { email } = user\n    const createdAt = new Date()\n\n    try {\n      await setDoc(userRef, {\n        email,\n        firstName: additionalData.firstName || 'Restwebbapp',\n        lastName: additionalData.lastName || 'Admin',\n        fullName: additionalData.fullName || 'Restaurant Admin',\n        userPassword: additionalData.userPassword || '0919RW',\n        role: additionalData.role || 'admin',\n        isActive: true,\n        createdAt,\n        ...additionalData\n      })\n    } catch (error) {\n      console.error('Error creating user profile:', error)\n    }\n  }\n\n  return userRef\n}\n\n// Sign in with first name and generated ID\nexport async function signIn(firstName: string, userPassword: string): Promise<User | null> {\n  try {\n    // Handle special admin case first\n    if (firstName === 'Restwebbapp' && userPassword === '0919RW') {\n      // Sign in with Firebase Auth using admin email\n      const userCredential = await signInWithEmailAndPassword(auth, 'admin@restaurant.com', '0919RW')\n      const firebaseUser = userCredential.user\n\n      // Get admin profile from Firestore\n      const userRef = doc(db, 'users', firebaseUser.uid)\n      const userDoc = await getDoc(userRef)\n      \n      if (userDoc.exists()) {\n        const userData = userDoc.data()\n        return {\n          id: firebaseUser.uid,\n          email: firebaseUser.email!,\n          firstName: 'Restwebbapp',\n          lastName: 'Admin',\n          fullName: 'Restaurant Admin',\n          userPassword: '0919RW',\n          role: userData.role,\n          isActive: userData.isActive\n        }\n      }\n    }\n\n    // For regular users, search by firstName and userPassword\n    const usersRef = collection(db, 'users')\n    const q = query(usersRef, \n      where('firstName', '==', firstName), \n      where('userPassword', '==', userPassword),\n      where('isActive', '==', true)\n    )\n    const querySnapshot = await getDocs(q)\n    \n    if (querySnapshot.empty) {\n      throw new Error('Invalid username or password')\n    }\n\n    const userDoc = querySnapshot.docs[0]\n    const userData = userDoc.data()\n    \n    // Sign in with Firebase Auth using their email\n    const userCredential = await signInWithEmailAndPassword(auth, userData.email, userPassword)\n    const firebaseUser = userCredential.user\n\n    return {\n      id: firebaseUser.uid,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      fullName: userData.fullName,\n      userPassword: userData.userPassword,\n      role: userData.role,\n      isActive: userData.isActive\n    }\n  } catch (error) {\n    console.error('Sign in error:', error)\n    return null\n  }\n}\n\n// Create admin user with demo credentials\nexport async function createAdminUser() {\n  try {\n    // Create auth user with demo credentials\n    const userCredential = await createUserWithEmailAndPassword(\n      auth, \n      'admin@restaurant.com', \n      '0919RW'\n    )\n    \n    // Create admin profile with firstName as 'Restwebbapp'\n    await createUserProfile(userCredential.user, {\n      firstName: 'Restwebbapp',\n      lastName: 'Admin',\n      fullName: 'Restaurant Admin',\n      userPassword: '0919RW',\n      role: 'admin',\n      isActive: true\n    })\n\n    return userCredential.user\n  } catch (error) {\n    console.error('Error creating admin user:', error)\n    throw error\n  }\n}\n\n// Get current user profile\nexport async function getCurrentUserProfile(): Promise<User | null> {\n  const currentUser = auth.currentUser\n  if (!currentUser) return null\n\n  const userRef = doc(db, 'users', currentUser.uid)\n  const userDoc = await getDoc(userRef)\n  \n  if (!userDoc.exists()) return null\n\n  const userData = userDoc.data()\n  return {\n    id: currentUser.uid,\n    email: currentUser.email!,\n    firstName: userData.firstName,\n    lastName: userData.lastName,\n    fullName: userData.fullName,\n    userPassword: userData.userPassword,\n    role: userData.role,\n    isActive: userData.isActive\n  }\n}\n\n// Sign out\nexport async function signOut() {\n  return firebaseSignOut(auth)\n}","size_bytes":6241},"lib/firebase/config.ts":{"content":"import { initializeApp } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n}\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig)\n\n// Initialize Firebase Auth\nexport const auth = getAuth(app)\n\n// Initialize Firestore\nexport const db = getFirestore(app)\n\nexport default app","size_bytes":732},"lib/supabase/client.ts":{"content":"import { createClient as createSupabaseClient } from '@supabase/supabase-js'\n\nexport function createClient() {\n  return createSupabaseClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n\nexport { createClient as createSupabaseClient }\n","size_bytes":287},"lib/supabase/middleware.ts":{"content":"import { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function updateSession(request: NextRequest) {\n  // Authentication will be handled client-side for now\n  return NextResponse.next({\n    request,\n  })\n}\n","size_bytes":227},"lib/supabase/server.ts":{"content":"import { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport function createServerSupabaseClient() {\n  const cookieStore = cookies()\n  \n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n\nexport { createServerSupabaseClient as createClient }\n","size_bytes":849},"lib/supabase/simple-client.ts":{"content":"import { createClient as createSupabaseClient } from \"@supabase/supabase-js\"\n\nexport function createClient() {\n  return createSupabaseClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!)\n}\n","size_bytes":226},"lib/utils/id-generator.ts":{"content":"/**\n * Generates user ID based on current date and user names\n * Format: DDMM + first letter of first name + first letter of last name\n * Example: John Doe created on Sept 19 -> 1909JD\n */\nexport function generateUserId(firstName: string, lastName: string): string {\n  const now = new Date()\n  const day = now.getDate().toString().padStart(2, '0')\n  const month = (now.getMonth() + 1).toString().padStart(2, '0')\n  \n  const firstInitial = firstName.charAt(0).toUpperCase()\n  const lastInitial = lastName.charAt(0).toUpperCase()\n  \n  return `${day}${month}${firstInitial}${lastInitial}`\n}\n\n/**\n * Validates if a string matches the ID format\n * DDMM + 2 letters\n */\nexport function isValidIdFormat(id: string): boolean {\n  const idPattern = /^\\d{4}[A-Z]{2}$/\n  return idPattern.test(id)\n}\n\n/**\n * Extracts date info from user ID for display purposes\n */\nexport function parseIdDate(id: string): { day: string, month: string } | null {\n  if (!isValidIdFormat(id)) return null\n  \n  return {\n    day: id.substring(0, 2),\n    month: id.substring(2, 4)\n  }\n}","size_bytes":1051},"app/auth/error/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { AlertCircle } from \"lucide-react\"\n\nexport default async function AuthErrorPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ error: string }>\n}) {\n  const params = await searchParams\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-orange-50 p-6\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-red-500 rounded-full flex items-center justify-center\">\n              <AlertCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">Authentication Error</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            {params?.error ? (\n              <p className=\"text-sm text-gray-600 mb-4\">Error: {params.error}</p>\n            ) : (\n              <p className=\"text-sm text-gray-600 mb-4\">An authentication error occurred.</p>\n            )}\n            <a href=\"/auth/login\" className=\"text-orange-500 hover:text-orange-600 font-medium\">\n              Return to Login\n            </a>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":1358},"app/auth/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { ChefHat } from \"lucide-react\"\n\nexport default function LoginPage() {\n  const [firstName, setFirstName] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      console.log(\"[v0] Attempting login with firstName:\", firstName)\n\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ firstName, password }),\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || \"Invalid first name or password\")\n      }\n\n      console.log(\"[v0] Login successful:\", result)\n\n      if (result.user.role === \"admin\") {\n        router.push(\"/admin\")\n      } else {\n        // Handle both waiter and waitstaff roles\n        router.push(\"/waiter\")\n      }\n    } catch (error: unknown) {\n      console.log(\"[v0] Login error:\", error)\n      setError(error instanceof Error ? error.message : \"An error occurred\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center\">\n              <ChefHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-3xl font-bold text-gray-900\">Restaurant POS</CardTitle>\n            <CardDescription className=\"text-gray-600\">Sign in to access your dashboard</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700\">\n                  First Name\n                </Label>\n                <Input\n                  id=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"Enter your first name\"\n                  required\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                  className=\"h-12\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                  ID (Password)\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your ID (e.g., 2009JD)\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"h-12\"\n                />\n              </div>\n              {error && (\n                <div className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">{error}</div>\n              )}\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-orange-500 hover:bg-orange-600 text-white font-medium\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n              <p className=\"text-sm text-blue-800 font-medium\">Login Instructions:</p>\n              <p className=\"text-xs text-blue-600\">Username: Your first name</p>\n              <p className=\"text-xs text-blue-600\">Password: Your generated ID (e.g., 2009JD)</p>\n              <p className=\"text-xs text-blue-600\">ID format: Day+Month+FirstInitial+LastInitial</p>\n            </div>\n\n            <div className=\"mt-6 text-center text-sm space-y-2\">\n              <div className=\"text-gray-600\">\n                Accounts can only be created by admin users in the admin dashboard.\n              </div>\n              <div>\n                First time setup?{\" \"}\n                <Link href=\"/setup\" className=\"text-blue-500 hover:text-blue-600 font-medium hover:underline\">\n                  Create admin user\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5038},"app/auth/signup/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport Link from \"next/link\"\n\nexport default function SignUpPage() {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    username: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"waiter\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n\n  const supabase = createClient()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n\n    try {\n      // Create user in Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n      })\n\n      if (authError) throw authError\n\n      if (authData.user) {\n        // Create user record in our users table\n        const { error: dbError } = await supabase.from(\"users\").insert({\n          id: authData.user.id,\n          email: formData.email,\n          username: formData.username,\n          first_name: formData.firstName,\n          last_name: formData.lastName,\n          role: formData.role,\n          is_active: true,\n          hire_date: new Date().toISOString().split(\"T\")[0],\n        })\n\n        if (dbError) throw dbError\n\n        router.push(\"/auth/login?message=Account created successfully\")\n      }\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Create Account</CardTitle>\n          <CardDescription>Set up a new staff account for the restaurant</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && <div className=\"p-3 text-sm text-red-500 bg-red-50 border border-red-200 rounded\">{error}</div>}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                value={formData.username}\n                onChange={(e) => setFormData((prev) => ({ ...prev, username: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, firstName: e.target.value }))}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, lastName: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select\n                value={formData.role}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, role: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"waiter\">Waiter</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => setFormData((prev) => ({ ...prev, password: e.target.value }))}\n                required\n                minLength={6}\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/auth/login\" className=\"text-primary hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":5521},"app/receipt/[orderId]/page.tsx":{"content":"import { createClient } from \"@/lib/supabase/server\"\nimport { ReceiptGenerator } from \"@/components/receipt/receipt-generator\"\nimport { notFound } from \"next/navigation\"\n\ninterface ReceiptPageProps {\n  params: Promise<{ orderId: string }>\n}\n\nexport default async function ReceiptPage({ params }: ReceiptPageProps) {\n  const { orderId } = await params\n  const supabase = await createClient()\n\n  try {\n    const { data: order, error } = await supabase\n      .from(\"orders\")\n      .select(`\n        *,\n        waiter:users!orders_waiter_id_fkey (\n          first_name,\n          last_name\n        ),\n        order_items (\n          *,\n          menu_item:menu_items (\n            name,\n            description\n          )\n        )\n      `)\n      .eq(\"id\", orderId)\n      .single()\n\n    if (error || !order) {\n      notFound()\n    }\n\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-md mx-auto\">\n          <h1 className=\"text-2xl font-bold mb-6 text-center\">Order Receipt</h1>\n          <ReceiptGenerator order={order} />\n        </div>\n      </div>\n    )\n  } catch (error) {\n    console.error(\"Error fetching order:\", error)\n    notFound()\n  }\n}\n","size_bytes":1193},"app/api/auth/login/route.ts":{"content":"import { type NextRequest, NextResponse } from \"next/server\"\nimport { signIn } from \"@/lib/auth\"\n\n// Simple in-memory rate limiting\nconst loginAttempts = new Map<string, { count: number; resetTime: number }>()\nconst MAX_ATTEMPTS = 5\nconst WINDOW_MS = 15 * 60 * 1000 // 15 minutes\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { firstName, password } = await request.json()\n\n    if (!firstName || !password) {\n      return NextResponse.json({ error: \"First name and password are required\" }, { status: 400 })\n    }\n\n    // Rate limiting check\n    const clientIP = request.ip || request.headers.get(\"x-forwarded-for\") || \"unknown\"\n    const rateLimitKey = `${clientIP}:${firstName.toLowerCase()}`\n    \n    const now = Date.now()\n    const attempts = loginAttempts.get(rateLimitKey)\n    \n    if (attempts) {\n      if (now < attempts.resetTime) {\n        if (attempts.count >= MAX_ATTEMPTS) {\n          console.warn(`Rate limit exceeded for ${rateLimitKey}`)\n          return NextResponse.json({ error: \"Too many login attempts. Please try again later.\" }, { status: 429 })\n        }\n      } else {\n        // Reset window\n        loginAttempts.delete(rateLimitKey)\n      }\n    }\n\n    const user = await signIn(firstName, password)\n\n    if (!user) {\n      // Track failed attempt\n      const currentAttempts = loginAttempts.get(rateLimitKey)\n      if (currentAttempts && now < currentAttempts.resetTime) {\n        currentAttempts.count += 1\n      } else {\n        loginAttempts.set(rateLimitKey, { count: 1, resetTime: now + WINDOW_MS })\n      }\n      \n      console.warn(`Failed login attempt for firstName: ${firstName}, IP: ${clientIP}`)\n      return NextResponse.json({ error: \"Invalid first name or password\" }, { status: 401 })\n    }\n\n    // Clear rate limit on successful login\n    loginAttempts.delete(rateLimitKey)\n    \n    console.log(`Successful login for ${user.staff_id} (${firstName})`)\n    return NextResponse.json({ user })\n  } catch (error) {\n    console.error(\"Login error:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n","size_bytes":2109},"app/api/auth/setup/route.ts":{"content":"import { type NextRequest, NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log(\"[Setup API] Starting admin staff creation...\")\n\n    const { email, password, first_name, last_name, staff_id } = await request.json()\n    console.log(\"[Setup API] Received data:\", { email, first_name, last_name, staff_id })\n\n    if (!email || !password || !first_name || !last_name || !staff_id) {\n      console.log(\"[Setup API] Missing required fields\")\n      return NextResponse.json({ error: \"All fields are required\" }, { status: 400 })\n    }\n\n    const supabase = createClient()\n\n    // Check if staff already exists (by staff_id or email)\n    console.log(\"[Setup API] Checking if staff exists...\")\n    const { data: existingStaff, error: checkError } = await supabase\n      .from('staff')\n      .select('staff_id, email')\n      .or(`staff_id.eq.${staff_id},email.eq.${email}`)\n      .maybeSingle()\n\n    if (checkError) {\n      console.error(\"[Setup API] Error checking existing staff:\", checkError)\n      return NextResponse.json({ error: \"Database error\" }, { status: 500 })\n    }\n\n    if (existingStaff) {\n      console.log(\"[Setup API] Staff already exists\")\n      return NextResponse.json({ error: \"Staff member or email already exists\" }, { status: 409 })\n    }\n\n    // Create auth user first\n    console.log(\"[Setup API] Creating Supabase auth user...\")\n    const { data: authData, error: authError } = await supabase.auth.signUp({\n      email,\n      password,\n    })\n\n    if (authError) {\n      console.error(\"[Setup API] Error creating auth user:\", authError)\n      return NextResponse.json({ error: \"Failed to create auth user\" }, { status: 500 })\n    }\n\n    // Create staff profile\n    console.log(\"[Setup API] Creating staff profile...\")\n    const { data: staff, error: insertError } = await supabase\n      .from('staff')\n      .insert({\n        staff_id,\n        first_name,\n        last_name,\n        email,\n        status: 'active'\n      })\n      .select('staff_id, first_name, last_name, email, status')\n      .single()\n\n    if (insertError) {\n      console.error(\"[Setup API] Error creating staff:\", insertError)\n      return NextResponse.json({ error: \"Failed to create staff\" }, { status: 500 })\n    }\n\n    console.log(\"[Setup API] Staff created successfully:\", staff)\n\n    return NextResponse.json({\n      message: \"Admin staff created successfully\",\n      staff: {\n        staff_id: staff.staff_id,\n        first_name: staff.first_name,\n        last_name: staff.last_name,\n        email: staff.email,\n        status: staff.status,\n      },\n    })\n  } catch (error: any) {\n    console.error(\"[Setup API] Detailed error:\", {\n      message: error.message,\n      stack: error.stack,\n      name: error.name,\n    })\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}","size_bytes":2914},"replit.md":{"content":"# Restaurant Management System\n\n## Overview\nThis is a modern restaurant management system built with Next.js, TypeScript, and Supabase. The application provides comprehensive functionality for restaurant operations including order management, staff administration, and receipt generation.\n\n## Architecture\n- **Frontend**: Next.js 14 with TypeScript\n- **Database**: Supabase (PostgreSQL)\n- **Authentication**: Supabase Auth\n- **UI Components**: Radix UI with Tailwind CSS\n- **Deployment**: Replit Autoscale\n\n## Key Features\n- **Multi-role Authentication**: Admin and waiter roles with different access levels\n- **Order Management**: Complete order lifecycle from creation to completion\n- **Menu Management**: Dynamic menu item management for admins\n- **Receipt Generation**: Automated receipt creation and printing\n- **Staff Management**: User creation and management for restaurant staff\n- **Real-time Updates**: Live order status updates\n\n## Project Structure\n- `/app` - Next.js App Router pages and API routes\n- `/components` - Reusable UI components organized by feature\n- `/lib` - Utility functions, database, and authentication logic\n- `/public` - Static assets and images\n- `/scripts` - Database migration scripts\n\n## Database Setup\nThe project uses Supabase for authentication and database management. Database tables are defined in the `/scripts` directory with SQL migration files.\n\n## Environment Variables\nThe following environment variables are required:\n- `NEXT_PUBLIC_SUPABASE_URL` - Your Supabase project URL\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY` - Your Supabase anonymous key\n\n## Development\nThe development server runs on port 5000 with hot reload enabled. The project is configured for the Replit environment with proper host settings.\n\n## Deployment\nConfigured for Replit Autoscale deployment with automatic scaling based on traffic.\n\n## Recent Changes\n- **2025-09-20**: Migrated from Firebase to Supabase\n- **2025-09-20**: Configured for Replit environment\n- **2025-09-20**: Set up production deployment configuration\n\n## User Roles\n- **Admin**: Full access to menu management, staff creation, order oversight, and analytics\n- **Waiter**: Order creation, management, and customer service functions","size_bytes":2213},"app/api/auth/me/route.ts":{"content":"import { type NextRequest, NextResponse } from \"next/server\"\nimport { getUser } from \"@/lib/auth\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getUser()\n\n    if (!user) {\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 })\n    }\n\n    return NextResponse.json({ user })\n  } catch (error) {\n    console.error(\"Auth check error:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}","size_bytes":487}},"version":1}